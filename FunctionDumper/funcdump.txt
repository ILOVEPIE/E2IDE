{"npcStop(e:)": {"args": "e:", "return": "", "name": "npcStop", "desc": ""}, "gResetGroup()": {"args": "", "return": "", "name": "gResetGroup", "desc": ""}, "egpText(e:nsxv2v)": {"args": "e:nsxv2v", "return": "", "name": "egpText", "desc": ""}, "dsSend(ssxm2)": {"args": "ssxm2", "return": "n", "name": "dsSend", "desc": ""}, "ang(nnn)": {"args": "nnn", "return": "a", "name": "ang", "desc": "Makes an angle"}, "egpCircle(e:nxv2xv2xv4)": {"args": "e:nxv2xv2xv4", "return": "", "name": "egpCircle", "desc": ""}, "dsSend(ssnt)": {"args": "ssnt", "return": "n", "name": "dsSend", "desc": ""}, "random(n)": {"args": "n", "return": "n", "name": "random", "desc": "Returns a random floating-point number between 0 and the specified value [''0 <= x < a '']"}, "stoptimer(s)": {"args": "s", "return": "", "name": "stoptimer", "desc": "Stops a timer, can stop interval with stoptimer(\"interval\")"}, "e()": {"args": "", "return": "n", "name": "e", "desc": ""}, "egpBox(xwl:nnnnn)": {"args": "xwl:nnnnn", "return": "", "name": "egpBox", "desc": ""}, "cosh(c)": {"args": "c", "return": "c", "name": "cosh", "desc": "Calculates the hyperbolic cosine of ''C''"}, "egpElements()": {"args": "", "return": "n", "name": "egpElements", "desc": ""}, "dsSend(ssnxm2)": {"args": "ssnxm2", "return": "n", "name": "dsSend", "desc": ""}, "length(xv2:)": {"args": "xv2:", "return": "n", "name": "length", "desc": ""}, "isOnFire(e:)": {"args": "e:", "return": "n", "name": "isOnFire", "desc": ""}, "egpAngle(xwl:nn)": {"args": "xwl:nn", "return": "", "name": "egpAngle", "desc": ""}, "length(xv4:)": {"args": "xv4:", "return": "n", "name": "length", "desc": ""}, "popAngle(r:)": {"args": "r:", "return": "a", "name": "popAngle", "desc": ""}, "clamp(vnn)": {"args": "vnn", "return": "v", "name": "clamp", "desc": "Returns a vector in the same direction as vector 1, with length clamped between argument 2(min) and argument 3(max)"}, "ceil(a)": {"args": "a", "return": "a", "name": "ceil", "desc": "Rounds PYR up to the nearest integer"}, "massCenterL(b:)": {"args": "b:", "return": "v", "name": "massCenterL", "desc": ""}, "getConstraints(e:)": {"args": "e:", "return": "r", "name": "getConstraints", "desc": ""}, "egpMaterialFromScreen(xwl:ne)": {"args": "xwl:ne", "return": "", "name": "egpMaterialFromScreen", "desc": ""}, "vec(q)": {"args": "q", "return": "v", "name": "vec", "desc": "Converts ''Q'' to a vector by dropping the real component"}, "clear(r:)": {"args": "r:", "return": "", "name": "clear", "desc": ""}, "dsGetMatrix()": {"args": "", "return": "m", "name": "dsGetMatrix", "desc": ""}, "teamColor(n)": {"args": "n", "return": "v", "name": "teamColor", "desc": "Returns the color of the team associated with the team number"}, "dsSend(ssc)": {"args": "ssc", "return": "n", "name": "dsSend", "desc": ""}, "matrix2(nnnn)": {"args": "nnnn", "return": "xm2", "name": "matrix2", "desc": "Creates a matrix with values in order (i.j) of: (1,1), (1,2), (2,1), (2,2)"}, "distance2(xv4:xv4)": {"args": "xv4:xv4", "return": "n", "name": "distance2", "desc": ""}, "toString(a:)": {"args": "a:", "return": "s", "name": "toString", "desc": ""}, "rangerAngleHull(nnnvv)": {"args": "nnnvv", "return": "xrd", "name": "rangerAngleHull", "desc": ""}, "row(m:n)": {"args": "m:n", "return": "v", "name": "row", "desc": "Returns the row as a vector"}, "keyAttack2(e:)": {"args": "e:", "return": "n", "name": "keyAttack2", "desc": ""}, "holoMaterial(ns)": {"args": "ns", "return": "", "name": "holoMaterial", "desc": "Index, Material<br>Changes the material of a hologram"}, "toString(e)": {"args": "e", "return": "s", "name": "toString", "desc": ""}, "toString(c:)": {"args": "c:", "return": "s", "name": "toString", "desc": ""}, "gGetEnt(n)": {"args": "n", "return": "e", "name": "gGetEnt", "desc": ""}, "concat(r:)": {"args": "r:", "return": "s", "name": "concat", "desc": ""}, "gSetGroup(s)": {"args": "s", "return": "", "name": "gSetGroup", "desc": "Sets the E2's current group. Does persist."}, "floor(vn)": {"args": "vn", "return": "v", "name": "floor", "desc": "Rounds XYZ down to argument 2's decimal precision"}, "signalClk(ss)": {"args": "ss", "return": "n", "name": "signalClk", "desc": ""}, "dsSend(ssq)": {"args": "ssq", "return": "n", "name": "dsSend", "desc": ""}, "sinh(c)": {"args": "c", "return": "c", "name": "sinh", "desc": "Calculates the hyperbolic sine of ''C''"}, "holoRemainingSpawns()": {"args": "", "return": "n", "name": "holoRemainingSpawns", "desc": ""}, "ping(e:)": {"args": "e:", "return": "n", "name": "ping", "desc": ""}, "holoCreate(nvvav)": {"args": "nvvav", "return": "e", "name": "holoCreate", "desc": "Index, Position, Scale, Angle, Color (RGB)<br>Creates a new hologram entity"}, "z(xm4:)": {"args": "xm4:", "return": "v", "name": "z", "desc": ""}, "dsSend(ssna)": {"args": "ssna", "return": "n", "name": "dsSend", "desc": ""}, "egpPolyColor(xwl:nvr)": {"args": "xwl:nvr", "return": "", "name": "egpPolyColor", "desc": ""}, "w(xv4:)": {"args": "xv4:", "return": "n", "name": "w", "desc": ""}, "isWorld(e:)": {"args": "e:", "return": "n", "name": "isWorld", "desc": ""}, "adj(m)": {"args": "m", "return": "m", "name": "adj", "desc": "Returns the adjugate of a matrix (Does not work for 4x4 matrices)"}, "ceil(xv4)": {"args": "xv4", "return": "xv4", "name": "ceil", "desc": ""}, "writeString(xwl:snnvv)": {"args": "xwl:snnvv", "return": "", "name": "writeString", "desc": ""}, "setYaw(a:n)": {"args": "a:n", "return": "a", "name": "setYaw", "desc": "Returns a copy of the angle with Yaw replaced (use as Ang = Ang:setYaw(...)) "}, "insertMatrix4(r:nxm4)": {"args": "r:nxm4", "return": "", "name": "insertMatrix4", "desc": ""}, "tan(c)": {"args": "c", "return": "c", "name": "tan", "desc": "Calculates the tangent of ''C''"}, "npcRelationshipByOwner(e:esn)": {"args": "e:esn", "return": "n", "name": "npcRelationshipByOwner", "desc": " Sets the NPC's relationship to all currently existing NPCs owned by player E. Returns number of entities added to relationships."}, "findIncludePlayerProps(e)": {"args": "e", "return": "", "name": "findIncludePlayerProps", "desc": "Include entities owned by this player from future finds, and remove others not in the whitelist"}, "isSinglePlayer()": {"args": "", "return": "n", "name": "isSinglePlayer", "desc": ""}, "max(xv4xv4)": {"args": "xv4xv4", "return": "xv4", "name": "max", "desc": ""}, "systime()": {"args": "", "return": "n", "name": "systime", "desc": ""}, "boxSize(e:)": {"args": "e:", "return": "v", "name": "boxSize", "desc": ""}, "egpBox(xwl:nnnnnxv4)": {"args": "xwl:nnnnnxv4", "return": "", "name": "egpBox", "desc": ""}, "parent(e:)": {"args": "e:", "return": "e", "name": "parent", "desc": ""}, "right(a:)": {"args": "a:", "return": "v", "name": "right", "desc": ""}, "bone(xwl:s)": {"args": "xwl:s", "return": "b", "name": "bone", "desc": ""}, "removeVector(r:n)": {"args": "r:n", "return": "v", "name": "removeVector", "desc": ""}, "gRemoveAllAngles()": {"args": "", "return": "", "name": "gRemoveAllAngles", "desc": ""}, "setX(xv4:n)": {"args": "xv4:n", "return": "xv4", "name": "setX", "desc": ""}, "select(nn...)": {"args": "nn...", "return": "n", "name": "select", "desc": ""}, "dsSend(ssne)": {"args": "ssne", "return": "n", "name": "dsSend", "desc": ""}, "ang()": {"args": "", "return": "a", "name": "ang", "desc": ""}, "gRemoveAllAngles(s)": {"args": "s", "return": "", "name": "gRemoveAllAngles", "desc": ""}, "x(v:)": {"args": "v:", "return": "n", "name": "x", "desc": ""}, "popEntity(r:)": {"args": "r:", "return": "e", "name": "popEntity", "desc": ""}, "insertMatrix(r:nm)": {"args": "r:nm", "return": "", "name": "insertMatrix", "desc": ""}, "wirelink(t:s)": {"args": "t:s", "return": "xwl", "name": "wirelink", "desc": ""}, "egpCircle(xwl:nxv2xv2)": {"args": "xwl:nxv2xv2", "return": "", "name": "egpCircle", "desc": ""}, "clamp(xv2xv2xv2)": {"args": "xv2xv2xv2", "return": "xv2", "name": "clamp", "desc": ""}, "xyz(xwl:)": {"args": "xwl:", "return": "v", "name": "xyz", "desc": ""}, "egpText(e:nsnnxv4)": {"args": "e:nsnnxv4", "return": "", "name": "egpText", "desc": ""}, "egpTextLayout(xwl:nsxv2xv2v)": {"args": "xwl:nsxv2xv2v", "return": "", "name": "egpTextLayout", "desc": ""}, "cscr(n)": {"args": "n", "return": "n", "name": "cscr", "desc": "Returns the cosecant of N radians"}, "dsSendDirect(sev)": {"args": "sev", "return": "n", "name": "dsSendDirect", "desc": ""}, "isPlayer(e:)": {"args": "e:", "return": "n", "name": "isPlayer", "desc": ""}, "setColumn(xm2:nnn)": {"args": "xm2:nnn", "return": "xm2", "name": "setColumn", "desc": ""}, "writeArray(xwl:nr)": {"args": "xwl:nr", "return": "n", "name": "writeArray", "desc": "Writes an array's elements into a piece of memory. Strings and sub-tables (angles, vectors, matrices) are written as pointers to the actual data. Strings are written null-terminated."}, "findClipToRegion(vv)": {"args": "vv", "return": "n", "name": "findClipToRegion", "desc": ""}, "removeVector(xgt:s)": {"args": "xgt:s", "return": "v", "name": "removeVector", "desc": ""}, "angVel(e:)": {"args": "e:", "return": "a", "name": "angVel", "desc": ""}, "sechr(n)": {"args": "n", "return": "n", "name": "sechr", "desc": ""}, "findIncludeEntities(r)": {"args": "r", "return": "", "name": "findIncludeEntities", "desc": "Include all entities from ''R'' in future finds, and remove others not in the whitelist"}, "bone(xrd:)": {"args": "xrd:", "return": "b", "name": "bone", "desc": ""}, "time(s)": {"args": "s", "return": "n", "name": "time", "desc": "Returns numerical time/date info from the server. Possible arguments: '''\"year\"''', '''\"month\"''', '''\"day\"''', '''\"hour\"''', '''\"min\"''', '''\"sec\"''', '''\"wday\"''' (weekday, Sunday is 1), '''\"yday\"''' (day of the year), and '''\"isdst\"''' (daylight saving flag 0/1)"}, "egpBox(xwl:nxv2xv2)": {"args": "xwl:nxv2xv2", "return": "", "name": "egpBox", "desc": ""}, "quat(vv)": {"args": "vv", "return": "q", "name": "quat", "desc": ""}, "right(q:)": {"args": "q:", "return": "v", "name": "right", "desc": ""}, "egpPos2(xwl:nnn)": {"args": "xwl:nnn", "return": "", "name": "egpPos2", "desc": ""}, "egpPosX2(xwl:nn)": {"args": "xwl:nn", "return": "", "name": "egpPosX2", "desc": ""}, "dsGetComplex()": {"args": "", "return": "c", "name": "dsGetComplex", "desc": ""}, "dsSend(ssns)": {"args": "ssns", "return": "n", "name": "dsSend", "desc": ""}, "holoClip(nvvn)": {"args": "nvvn", "return": "", "name": "holoClip", "desc": "Index, Position, Direction, isGlobal.<br>Defines where a hologram is clipped. isGlobal to choose between local and world vectors."}, "egpBoxOutline(e:nnnnn)": {"args": "e:nnnnn", "return": "", "name": "egpBoxOutline", "desc": ""}, "egpMaterialFromScreen(e:ne)": {"args": "e:ne", "return": "", "name": "egpMaterialFromScreen", "desc": ""}, "dsSendDirect(sexv2)": {"args": "sexv2", "return": "n", "name": "dsSendDirect", "desc": ""}, "clone(r:)": {"args": "r:", "return": "r", "name": "clone", "desc": ""}, "holoScale(nv)": {"args": "nv", "return": "", "name": "holoScale", "desc": "Index, Scale<br>Scales a hologram by a scale factor in each direction given by a vector"}, "minVec(xv2xv2)": {"args": "xv2xv2", "return": "xv2", "name": "minVec", "desc": ""}, "setColumn(xm2:nxv2)": {"args": "xm2:nxv2", "return": "xm2", "name": "setColumn", "desc": ""}, "min(xv2xv2)": {"args": "xv2xv2", "return": "xv2", "name": "min", "desc": ""}, "findInBox(vv)": {"args": "vv", "return": "n", "name": "findInBox", "desc": "Like findInSphere but with a globally aligned box, the arguments are the diagonal corners of the box"}, "egpSize(e:nxv2)": {"args": "e:nxv2", "return": "", "name": "egpSize", "desc": ""}, "shiftNumber(r:)": {"args": "r:", "return": "n", "name": "shiftNumber", "desc": ""}, "egpBox(xwl:nnnnnv)": {"args": "xwl:nnnnnv", "return": "", "name": "egpBox", "desc": ""}, "chatClk(e)": {"args": "e", "return": "n", "name": "chatClk", "desc": "Returns 1 if the chip is being executed because of a chat event by player ''E''. Returns 0 otherwise."}, "isPlayerHolding(e:)": {"args": "e:", "return": "n", "name": "isPlayerHolding", "desc": ""}, "setString(xwl:ss)": {"args": "xwl:ss", "return": "s", "name": "setString", "desc": "Deprecated. Use XWL[S,string]=X instead."}, "egpSize(xwl:nxv2)": {"args": "xwl:nxv2", "return": "", "name": "egpSize", "desc": ""}, "convarnum(s)": {"args": "s", "return": "n", "name": "convarnum", "desc": "Give a console command such as \"<tt>sbox_godmode</tt>\" and it returns the set value"}, "angles(e:)": {"args": "e:", "return": "a", "name": "angles", "desc": ""}, "setVector2(t:sxv2)": {"args": "t:sxv2", "return": "xv2", "name": "setVector2", "desc": ""}, "findClipFromClass(s)": {"args": "s", "return": "n", "name": "findClipFromClass", "desc": "Filters the list of entities by removing all entities that are of this class"}, "remove(r:n)": {"args": "r:n", "return": "", "name": "remove", "desc": "Deletes the specified entry, moving subsequent entries down to compensate"}, "toNumber(s:n)": {"args": "s:n", "return": "n", "name": "toNumber", "desc": "Parses a number from a string. The argument given is the base. I.e. toNumber(16) will parse hex."}, "floor(xv2)": {"args": "xv2", "return": "xv2", "name": "floor", "desc": ""}, "findAllowPlayer(s)": {"args": "s", "return": "", "name": "findAllowPlayer", "desc": "Remove this player from the entity blacklist"}, "dsSend(ssb)": {"args": "ssb", "return": "n", "name": "dsSend", "desc": ""}, "passenger(e:)": {"args": "e:", "return": "e", "name": "passenger", "desc": ""}, "velL(b:)": {"args": "b:", "return": "v", "name": "velL", "desc": ""}, "egpText(xwl:nsnnxv4)": {"args": "xwl:nsnnxv4", "return": "", "name": "egpText", "desc": ""}, "setDiagonal(m:nnn)": {"args": "m:nnn", "return": "m", "name": "setDiagonal", "desc": "Sets the elements of the leading diagonal"}, "max(nnn)": {"args": "nnn", "return": "n", "name": "max", "desc": "Returns the highest value Argument"}, "npcShoot(e:)": {"args": "e:", "return": "", "name": "npcShoot", "desc": ""}, "insertVector2(r:nxv2)": {"args": "r:nxv2", "return": "", "name": "insertVector2", "desc": ""}, "gSetNum(nn)": {"args": "nn", "return": "", "name": "gSetNum", "desc": ""}, "runOnTick(n)": {"args": "n", "return": "", "name": "runOnTick", "desc": "If set to 1, the expression will execute once every game tick. See [[Admin#Tick]] and [[http://whisper.ausgamers.com/wiki/index.php/Tickrate]] For more information on how often this is run."}, "distance(v:v)": {"args": "v:v", "return": "n", "name": "distance", "desc": "Gets the distance between vectors"}, "holoAng(na)": {"args": "na", "return": "", "name": "holoAng", "desc": "Index, Angle<br>Sets the angles of a hologram"}, "insertVector(r:nv)": {"args": "r:nv", "return": "", "name": "insertVector", "desc": ""}, "soundPlay(sns)": {"args": "sns", "return": "", "name": "soundPlay", "desc": "soundPlay(string Index, int Duration, string Path to File)"}, "matrix4(r:n)": {"args": "r:n", "return": "xm4", "name": "matrix4", "desc": ""}, "ceil(v)": {"args": "v", "return": "v", "name": "ceil", "desc": "Rounds XYZ up to the nearest integer"}, "egpSetText(xwl:ns)": {"args": "xwl:ns", "return": "", "name": "egpSetText", "desc": ""}, "tickClk()": {"args": "", "return": "n", "name": "tickClk", "desc": ""}, "coth(n)": {"args": "n", "return": "n", "name": "coth", "desc": "Returns the hyperbolic cotangent of N"}, "toString(xv4)": {"args": "xv4", "return": "s", "name": "toString", "desc": ""}, "isConstrainedTo(e:s)": {"args": "e:s", "return": "e", "name": "isConstrainedTo", "desc": "Returns the first entity ''E'' was constrained to with the given constraint type (see the types list below)"}, "rangerHull(nv)": {"args": "nv", "return": "xrd", "name": "rangerHull", "desc": "Inputs: Distance, Hull BoxSize"}, "gDeleteStr(s)": {"args": "s", "return": "s", "name": "gDeleteStr", "desc": ""}, "mod(xv4xv4)": {"args": "xv4xv4", "return": "xv4", "name": "mod", "desc": ""}, "atan(c)": {"args": "c", "return": "c", "name": "atan", "desc": "Calculates the inverse tangent of ''C''"}, "shiftMatrix(r:)": {"args": "r:", "return": "m", "name": "shiftMatrix", "desc": ""}, "gRemoveAllVector4s(s)": {"args": "s", "return": "", "name": "gRemoveAllVector4s", "desc": ""}, "shiftBone(r:)": {"args": "r:", "return": "b", "name": "shiftBone", "desc": ""}, "complex(t:s)": {"args": "t:s", "return": "c", "name": "complex", "desc": ""}, "floor(a)": {"args": "a", "return": "a", "name": "floor", "desc": "Rounds PYR down to the nearest integer"}, "vector4(r:n)": {"args": "r:n", "return": "xv4", "name": "vector4", "desc": ""}, "randvec(nn)": {"args": "nn", "return": "v", "name": "randvec", "desc": ""}, "bXor(nn)": {"args": "nn", "return": "n", "name": "bXor", "desc": ""}, "egpLine(e:nnnnnv)": {"args": "e:nnnnnv", "return": "", "name": "egpLine", "desc": ""}, "removeEntity(xgt:s)": {"args": "xgt:s", "return": "e", "name": "removeEntity", "desc": ""}, "egpColor(e:nnnnn)": {"args": "e:nnnnn", "return": "", "name": "egpColor", "desc": ""}, "minquota()": {"args": "", "return": "n", "name": "minquota", "desc": ""}, "rangerHull(nnnv)": {"args": "nnnv", "return": "xrd", "name": "rangerHull", "desc": "Inputs: Distance, X Skew, Y Skew, Hull BoxSize"}, "vec2(nn)": {"args": "nn", "return": "xv2", "name": "vec2", "desc": "Makes a 2D vector"}, "gRemoveAllMatrixs()": {"args": "", "return": "", "name": "gRemoveAllMatrixs", "desc": ""}, "ang(v)": {"args": "v", "return": "a", "name": "ang", "desc": "Changes a vector variable into an angle variable"}, "toRad(n)": {"args": "n", "return": "n", "name": "toRad", "desc": "Converts Degree angles to Radian angles"}, "egpCircle(e:nnnnnxv4)": {"args": "e:nnnnnxv4", "return": "", "name": "egpCircle", "desc": ""}, "applyTorque(e:v)": {"args": "e:v", "return": "", "name": "applyTorque", "desc": "Applies torque according to the given vector, representing the torque axis, magnitude and direction"}, "dsSendDirect(sea)": {"args": "sea", "return": "n", "name": "dsSendDirect", "desc": ""}, "mix(aan)": {"args": "aan", "return": "a", "name": "mix", "desc": "Combines angle 1's PYR with angle 2's PYR by a proportion given by argument 3 (between 0 and 1)"}, "matrix(t:s)": {"args": "t:s", "return": "m", "name": "matrix", "desc": ""}, "egpGetPos2(e:nn)": {"args": "e:nn", "return": "xv2", "name": "egpGetPos2", "desc": ""}, "dsSendDirect(sexm4)": {"args": "sexm4", "return": "n", "name": "dsSendDirect", "desc": ""}, "bShr(nn)": {"args": "nn", "return": "n", "name": "bShr", "desc": ""}, "toLocal(e:v)": {"args": "e:v", "return": "v", "name": "toLocal", "desc": "Transforms from a world vector to a vector local to ''E''."}, "writeString(xwl:snn)": {"args": "xwl:snn", "return": "", "name": "writeString", "desc": "A helper function for using the [[Wired Console Screen]]. The string will be written to the screen in white text on black background. The number arguments specify the starting position - X/Horizontal (0-29 recommended) and Y/vertical (0-17)."}, "egpTextLayout(e:nsnnnnxv4)": {"args": "e:nsnnnnxv4", "return": "", "name": "egpTextLayout", "desc": ""}, "egpBoxOutline(e:nxv2xv2)": {"args": "e:nxv2xv2", "return": "", "name": "egpBoxOutline", "desc": ""}, "toAngle(xv2:)": {"args": "xv2:", "return": "n", "name": "toAngle", "desc": ""}, "unshiftBone(r:b)": {"args": "r:b", "return": "", "name": "unshiftBone", "desc": ""}, "egpCircle(e:nnnnn)": {"args": "e:nnnnn", "return": "", "name": "egpCircle", "desc": ""}, "select(na...)": {"args": "na...", "return": "a", "name": "select", "desc": ""}, "runOnSignal(snn)": {"args": "snn", "return": "", "name": "runOnSignal", "desc": ""}, "mix(xv4xv4n)": {"args": "xv4xv4n", "return": "xv4", "name": "mix", "desc": ""}, "egpTriangle(e:nnnnnnnxv4)": {"args": "e:nnnnnnnxv4", "return": "", "name": "egpTriangle", "desc": ""}, "vel(b:)": {"args": "b:", "return": "v", "name": "vel", "desc": ""}, "removeArray(xgt:s)": {"args": "xgt:s", "return": "r", "name": "removeArray", "desc": ""}, "vec2()": {"args": "", "return": "xv2", "name": "vec2", "desc": ""}, "setPitch(a:n)": {"args": "a:n", "return": "a", "name": "setPitch", "desc": "Returns a copy of the angle with Pitch replaced (use as Ang = Ang:setPitch(...)) "}, "holoDeleteAll()": {"args": "", "return": "", "name": "holoDeleteAll", "desc": ""}, "soundStop(n)": {"args": "n", "return": "", "name": "soundStop", "desc": "Stops the sound stored at the integer index and removes the entry"}, "gDeleteEnt(n)": {"args": "n", "return": "e", "name": "gDeleteEnt", "desc": ""}, "ops()": {"args": "", "return": "n", "name": "ops", "desc": ""}, "rangerFlags(s)": {"args": "s", "return": "", "name": "rangerFlags", "desc": "Sets the ranger flags. S can be any combination of I=ignore world, W=hit water, E=hit entities and Z=default to zero."}, "numPlayers()": {"args": "", "return": "n", "name": "numPlayers", "desc": ""}, "vec(a)": {"args": "a", "return": "v", "name": "vec", "desc": "Changes an angle variable into a vector variable"}, "values(t:)": {"args": "t:", "return": "r", "name": "values", "desc": ""}, "maxVec(vv)": {"args": "vv", "return": "v", "name": "maxVec", "desc": "Returns the vector combining the highest value components of V1 and V2"}, "dsSend(ssnr)": {"args": "ssnr", "return": "n", "name": "dsSend", "desc": ""}, "gGetAng(s)": {"args": "s", "return": "a", "name": "gGetAng", "desc": ""}, "swapElements(m:nnnn)": {"args": "m:nnnn", "return": "m", "name": "swapElements", "desc": "Swaps two elements, specified by indices ( i<sub>1</sub>, j<sub>1</sub>, i<sub>2</sub>, j<sub>2</sub> )"}, "shiftR(xv4)": {"args": "xv4", "return": "xv4", "name": "shiftR", "desc": ""}, "signalSendToPlayer(se)": {"args": "se", "return": "", "name": "signalSendToPlayer", "desc": "sends signal S to chips owned by the given player, multiple calls for different players do not overwrite each other"}, "egpGetColor(e:nn)": {"args": "e:nn", "return": "xv4", "name": "egpGetColor", "desc": ""}, "teamFrags(n)": {"args": "n", "return": "n", "name": "teamFrags", "desc": ""}, "angVel(b:)": {"args": "b:", "return": "a", "name": "angVel", "desc": ""}, "egpSize(e:nnn)": {"args": "e:nnn", "return": "", "name": "egpSize", "desc": ""}, "toAngle(q:)": {"args": "q:", "return": "a", "name": "toAngle", "desc": ""}, "printColor(...)": {"args": "...", "return": "", "name": "printColor", "desc": "Works like [[chat.AddText]](...). Parameters can be any amount and combination of numbers, strings, player entities, color vectors (both 3D and 4D)."}, "entity(b:)": {"args": "b:", "return": "e", "name": "entity", "desc": ""}, "setVector4(r:nxv4)": {"args": "r:nxv4", "return": "xv4", "name": "setVector4", "desc": ""}, "mod(xv2xv2)": {"args": "xv2xv2", "return": "xv2", "name": "mod", "desc": ""}, "egpColor(xwl:nnnn)": {"args": "xwl:nnnn", "return": "", "name": "egpColor", "desc": ""}, "dsSend(ssnxm4)": {"args": "ssnxm4", "return": "n", "name": "dsSend", "desc": ""}, "findResult(n)": {"args": "n", "return": "e", "name": "findResult", "desc": "Returns the indexed entity from the previous find event (valid parameters are 1 to the number of entities found)"}, "nobone()": {"args": "", "return": "b", "name": "nobone", "desc": ""}, "dsSendDirect(srn)": {"args": "srn", "return": "n", "name": "dsSendDirect", "desc": ""}, "findClipToName(s)": {"args": "s", "return": "n", "name": "findClipToName", "desc": "Filters the list of entities by removing all entities that do NOT have this name"}, "fileRemove(s)": {"args": "s", "return": "", "name": "fileRemove", "desc": "Removes a file from the server so you can upload another file."}, "shift(r:)": {"args": "r:", "return": "", "name": "shift", "desc": ""}, "roll(a:)": {"args": "a:", "return": "n", "name": "roll", "desc": ""}, "gSetVec(sv)": {"args": "sv", "return": "", "name": "gSetVec", "desc": ""}, "setMatrix(xwl:sm)": {"args": "xwl:sm", "return": "m", "name": "setMatrix", "desc": ""}, "swapRows(xm2:)": {"args": "xm2:", "return": "xm2", "name": "swapRows", "desc": ""}, "pushComplex(r:c)": {"args": "r:c", "return": "", "name": "pushComplex", "desc": ""}, "glonDecodeTable(s)": {"args": "s", "return": "t", "name": "glonDecodeTable", "desc": "Decodes ''S'' into a table, using [[GLON]]."}, "teamPlayers(n:)": {"args": "n:", "return": "n", "name": "teamPlayers", "desc": ""}, "select(nxwl...)": {"args": "nxwl...", "return": "xwl", "name": "select", "desc": ""}, "qi(n)": {"args": "n", "return": "q", "name": "qi", "desc": "Returns quaternion ''N''*i"}, "egpPos2(e:nxv2)": {"args": "e:nxv2", "return": "", "name": "egpPos2", "desc": ""}, "hsv2rgb(nnn)": {"args": "nnn", "return": "v", "name": "hsv2rgb", "desc": ""}, "gRemoveAll()": {"args": "", "return": "", "name": "gRemoveAll", "desc": ""}, "adj(xm2)": {"args": "xm2", "return": "xm2", "name": "adj", "desc": ""}, "signalSend(sn)": {"args": "sn", "return": "", "name": "signalSend", "desc": "Sends signal ''S'' to scope ''N''. Additional calls to this function with the same signal will overwrite the old call until the signal is issued."}, "floor(xv4n)": {"args": "xv4n", "return": "xv4", "name": "floor", "desc": ""}, "matrix(a)": {"args": "a", "return": "m", "name": "matrix", "desc": "Returns a 3x3 reference frame matrix as described by the angle ''A''. Multiplying by this matrix will be the same as rotating by the given angle."}, "dsSend(ssa)": {"args": "ssa", "return": "n", "name": "dsSend", "desc": ""}, "egpDraw(xwl:)": {"args": "xwl:", "return": "n", "name": "egpDraw", "desc": ""}, "matrix4()": {"args": "", "return": "xm4", "name": "matrix4", "desc": ""}, "row(xm2:n)": {"args": "xm2:n", "return": "xv2", "name": "row", "desc": ""}, "egpCircle(xwl:nnnnn)": {"args": "xwl:nnnnn", "return": "", "name": "egpCircle", "desc": ""}, "egpBox(xwl:nxv2xv2v)": {"args": "xwl:nxv2xv2v", "return": "", "name": "egpBox", "desc": ""}, "matrix4(e)": {"args": "e", "return": "xm4", "name": "matrix4", "desc": "Creates a 4x4 reference frame matrix from an entity's local direction vectors by columns in the order (x, y, z, pos), with the bottom row (0,0,0,1)"}, "holoColor(nxv4)": {"args": "nxv4", "return": "", "name": "holoColor", "desc": ""}, "glonDecode(s)": {"args": "s", "return": "r", "name": "glonDecode", "desc": "Decodes ''S'' into an array, using [[GLON]]."}, "length(s:)": {"args": "s:", "return": "n", "name": "length", "desc": ""}, "gRemoveAllArrays(s)": {"args": "s", "return": "", "name": "gRemoveAllArrays", "desc": ""}, "toByte(sn)": {"args": "sn", "return": "n", "name": "toByte", "desc": "Returns the ASCII code of the Nth character in the string"}, "asin(c)": {"args": "c", "return": "c", "name": "asin", "desc": "Calculates the inverse sine of ''C''"}, "toString(q)": {"args": "q", "return": "s", "name": "toString", "desc": "Formats ''Q'' as a string."}, "ceil(vn)": {"args": "vn", "return": "v", "name": "ceil", "desc": "Rounds XYZ up to argument 2's decimal precision"}, "trace(xm4)": {"args": "xm4", "return": "n", "name": "trace", "desc": ""}, "egpColor(xwl:nvn)": {"args": "xwl:nvn", "return": "", "name": "egpColor", "desc": ""}, "dsGetRanger()": {"args": "", "return": "xrd", "name": "dsGetRanger", "desc": ""}, "printDriver(e:ns)": {"args": "e:ns", "return": "n", "name": "printDriver", "desc": "Same as ''E''E:printDriver(''S''), but can make the text show up in different places. ''N'' can be one of the following: _HUD_PRINTCENTER, _HUD_PRINTCONSOLE, _HUD_PRINTNOTIFY, _HUD_PRINTTALK."}, "findByName(s)": {"args": "s", "return": "n", "name": "findByName", "desc": "Find all entities with the given name"}, "unshiftEntity(r:e)": {"args": "r:e", "return": "", "name": "unshiftEntity", "desc": ""}, "setMaterial(e:s)": {"args": "e:s", "return": "", "name": "setMaterial", "desc": "Sets the material of an entity. E:setMaterial(\"\") to reset material"}, "position(xrd:)": {"args": "xrd:", "return": "v", "name": "position", "desc": ""}, "owner()": {"args": "", "return": "e", "name": "owner", "desc": ""}, "egpTriangle(xwl:nxv2xv2xv2v)": {"args": "xwl:nxv2xv2xv2v", "return": "", "name": "egpTriangle", "desc": ""}, "gGetVec(s)": {"args": "s", "return": "v", "name": "gGetVec", "desc": ""}, "isVehicle(e:)": {"args": "e:", "return": "n", "name": "isVehicle", "desc": ""}, "setMatrix2(xwl:sxm2)": {"args": "xwl:sxm2", "return": "xm2", "name": "setMatrix2", "desc": ""}, "bone(t:s)": {"args": "t:s", "return": "b", "name": "bone", "desc": ""}, "y(xv2:)": {"args": "xv2:", "return": "n", "name": "y", "desc": ""}, "positive(xv4)": {"args": "xv4", "return": "xv4", "name": "positive", "desc": ""}, "gRemoveAllRangers(s)": {"args": "s", "return": "", "name": "gRemoveAllRangers", "desc": ""}, "string(r:n)": {"args": "r:n", "return": "s", "name": "string", "desc": ""}, "k(q:)": {"args": "q:", "return": "n", "name": "k", "desc": ""}, "floor(xv2n)": {"args": "xv2n", "return": "xv2", "name": "floor", "desc": ""}, "vec4()": {"args": "", "return": "xv4", "name": "vec4", "desc": ""}, "swapColumns(m:nn)": {"args": "m:nn", "return": "m", "name": "swapColumns", "desc": "Swaps the two columns specified"}, "rangerFlags()": {"args": "", "return": "s", "name": "rangerFlags", "desc": ""}, "dsGetString()": {"args": "", "return": "s", "name": "dsGetString", "desc": ""}, "removeNumber(xgt:s)": {"args": "xgt:s", "return": "n", "name": "removeNumber", "desc": ""}, "glonEncode(r)": {"args": "r", "return": "s", "name": "glonEncode", "desc": "Encodes ''R'' into a string, using [[GLON]]."}, "toString(v:)": {"args": "v:", "return": "s", "name": "toString", "desc": ""}, "changed(xrd)": {"args": "xrd", "return": "n", "name": "changed", "desc": ""}, "setMass(e:n)": {"args": "e:n", "return": "", "name": "setMass", "desc": "Sets the mass of the entity (between 0.001 and 50,000)"}, "gGetAng(n)": {"args": "n", "return": "a", "name": "gGetAng", "desc": ""}, "npcGiveWeapon(e:)": {"args": "e:", "return": "", "name": "npcGiveWeapon", "desc": ""}, "log(nn)": {"args": "nn", "return": "n", "name": "log", "desc": " Returns the logarithm to base Argument 2 of Argument 1"}, "swapElements(xm2:nnnn)": {"args": "xm2:nnnn", "return": "xm2", "name": "swapElements", "desc": ""}, "cothr(n)": {"args": "n", "return": "n", "name": "cothr", "desc": ""}, "dsSend(ssnc)": {"args": "ssnc", "return": "n", "name": "dsSend", "desc": ""}, "friends(e:)": {"args": "e:", "return": "r", "name": "friends", "desc": ""}, "pos(xm4:)": {"args": "xm4:", "return": "v", "name": "pos", "desc": ""}, "dsGetVector4()": {"args": "", "return": "xv4", "name": "dsGetVector4", "desc": ""}, "clamp(ann)": {"args": "ann", "return": "a", "name": "clamp", "desc": "Clamps angle 1's PYR between argument 2(min) and argument 3(max)"}, "csch(n)": {"args": "n", "return": "n", "name": "csch", "desc": "Returns the hyperbolic cosecant of N "}, "invert(t)": {"args": "t", "return": "t", "name": "invert", "desc": "Returns a lookup table for ''T''. Usage: Key = T:string(toString(Value))<br />"}, "up(e:)": {"args": "e:", "return": "v", "name": "up", "desc": ""}, "exit()": {"args": "", "return": "", "name": "exit", "desc": ""}, "quat(a)": {"args": "a", "return": "q", "name": "quat", "desc": "Converts ''A'' to a quaternion"}, "boxCenter(e:)": {"args": "e:", "return": "v", "name": "boxCenter", "desc": ""}, "findExcludeEntity(e)": {"args": "e", "return": "", "name": "findExcludeEntity", "desc": "Exclude ''E'' from future finds"}, "attachmentAng(e:s)": {"args": "e:s", "return": "a", "name": "attachmentAng", "desc": ""}, "upper(s:)": {"args": "s:", "return": "s", "name": "upper", "desc": ""}, "qRotation(v)": {"args": "v", "return": "q", "name": "qRotation", "desc": "Construct a quaternion from the rotation vector ''V''. Vector direction is axis of rotation, magnitude is angle in degress (by coder0xff)"}, "egpGetPos2(xwl:nn)": {"args": "xwl:nn", "return": "xv2", "name": "egpGetPos2", "desc": ""}, "npcRelationship(e:esn)": {"args": "e:esn", "return": "", "name": "npcRelationship", "desc": "Will set the NPC's relationship to the specified entity to the S input, priority N. Priority is any number between 0 and 999. The relationship string can be either \"like\" \"neutral\" \"hate\" or \"fear\". Same goes for all other relationship functions."}, "int(n)": {"args": "n", "return": "n", "name": "int", "desc": "Returns the Integer part of the Argument (same as floor)"}, "egpText(e:nsxv2xv4)": {"args": "e:nsxv2xv4", "return": "", "name": "egpText", "desc": ""}, "select(nxgt...)": {"args": "nxgt...", "return": "xgt", "name": "select", "desc": ""}, "forward(a:)": {"args": "a:", "return": "v", "name": "forward", "desc": ""}, "findAllowEntity(e)": {"args": "e", "return": "", "name": "findAllowEntity", "desc": "Remove ''E'' from the blacklist"}, "aimPos(e:)": {"args": "e:", "return": "v", "name": "aimPos", "desc": ""}, "forward(q:)": {"args": "q:", "return": "v", "name": "forward", "desc": ""}, "findClipToSphere(vn)": {"args": "vn", "return": "n", "name": "findClipToSphere", "desc": "Filters the list of entities by removing all entities NOT within the specified sphere (center, radius)"}, "egpPos1(e:nxv2)": {"args": "e:nxv2", "return": "", "name": "egpPos1", "desc": ""}, "removeMatrix(r:n)": {"args": "r:n", "return": "m", "name": "removeMatrix", "desc": ""}, "setRow(xm2:nxv2)": {"args": "xm2:nxv2", "return": "xm2", "name": "setRow", "desc": ""}, "findIncludeModel(s)": {"args": "s", "return": "", "name": "findIncludeModel", "desc": "Include entities with this model (or partial model name) in future finds, and remove others not in the whitelist"}, "printColor(r)": {"args": "r", "return": "", "name": "printColor", "desc": "Like printColor(...), except taking an array containing all the parameters."}, "dsSend(ssnq)": {"args": "ssnq", "return": "n", "name": "dsSend", "desc": ""}, "mass(e:)": {"args": "e:", "return": "n", "name": "mass", "desc": ""}, "log2(c)": {"args": "c", "return": "c", "name": "log2", "desc": "Calculates the logarithm of ''C'' to base 2"}, "setNumber(t:sn)": {"args": "t:sn", "return": "n", "name": "setNumber", "desc": ""}, "convertUnit(ssn)": {"args": "ssn", "return": "n", "name": "convertUnit", "desc": "Converts between two units"}, "fileLoad(s)": {"args": "s", "return": "", "name": "fileLoad", "desc": "Loads the file from the client and sends it to server (You must wait at least 10 seconds before uploading to server and the file has to be under 100 kb)."}, "dsSendDirect(srxm4)": {"args": "srxm4", "return": "n", "name": "dsSendDirect", "desc": ""}, "changed(xm4)": {"args": "xm4", "return": "n", "name": "changed", "desc": ""}, "gRemoveAllEntitys(s)": {"args": "s", "return": "", "name": "gRemoveAllEntitys", "desc": ""}, "egpDeleteFrame(xwl:n)": {"args": "xwl:n", "return": "", "name": "egpDeleteFrame", "desc": ""}, "findExcludePlayerProps(s)": {"args": "s", "return": "", "name": "findExcludePlayerProps", "desc": "Exclude entities owned by this player from future finds"}, "gRemoveAllWirelinks(s)": {"args": "s", "return": "", "name": "gRemoveAllWirelinks", "desc": ""}, "gDeleteStr(n)": {"args": "n", "return": "s", "name": "gDeleteStr", "desc": ""}, "egpPolyColor(xwl:nxv4...)": {"args": "xwl:nxv4...", "return": "", "name": "egpPolyColor", "desc": ""}, "pushAngle(r:a)": {"args": "r:a", "return": "", "name": "pushAngle", "desc": ""}, "dsSendDirect(set)": {"args": "set", "return": "n", "name": "dsSendDirect", "desc": ""}, "setZ(xv4:n)": {"args": "xv4:n", "return": "xv4", "name": "setZ", "desc": ""}, "soundPurge()": {"args": "", "return": "", "name": "soundPurge", "desc": ""}, "matrix2(xv2xv2)": {"args": "xv2xv2", "return": "xm2", "name": "matrix2", "desc": ""}, "egpColor(e:nxv4)": {"args": "e:nxv4", "return": "", "name": "egpColor", "desc": ""}, "egpSaveFrame(e:nn)": {"args": "e:nn", "return": "", "name": "egpSaveFrame", "desc": ""}, "findClearWhiteModelList()": {"args": "", "return": "", "name": "findClearWhiteModelList", "desc": ""}, "deaths(e:)": {"args": "e:", "return": "n", "name": "deaths", "desc": ""}, "egpColor(e:nvn)": {"args": "e:nvn", "return": "", "name": "egpColor", "desc": ""}, "toWorld(e:v)": {"args": "e:v", "return": "v", "name": "toWorld", "desc": "Transforms from a vector local to ''E'' to a world vector."}, "printTable(r)": {"args": "r", "return": "", "name": "printTable", "desc": "Prints an array like the lua function [[G.PrintTable|PrintTable]] does, except to the chat area."}, "sub(s:n)": {"args": "s:n", "return": "s", "name": "sub", "desc": "Returns a substring, starting at the number argument and ending at the end of the string"}, "model(e:)": {"args": "e:", "return": "s", "name": "model", "desc": ""}, "matrix(xwl:s)": {"args": "xwl:s", "return": "m", "name": "matrix", "desc": ""}, "dsSendDirect(sexv4)": {"args": "sexv4", "return": "n", "name": "dsSendDirect", "desc": ""}, "egpSize(xwl:nnn)": {"args": "xwl:nnn", "return": "", "name": "egpSize", "desc": ""}, "pitch(a:)": {"args": "a:", "return": "n", "name": "pitch", "desc": ""}, "unshiftVector2(r:xv2)": {"args": "r:xv2", "return": "", "name": "unshiftVector2", "desc": ""}, "round(xv4n)": {"args": "xv4n", "return": "xv4", "name": "round", "desc": ""}, "setColumn(xm4:nxv4)": {"args": "xm4:nxv4", "return": "xm4", "name": "setColumn", "desc": ""}, "comp(nn)": {"args": "nn", "return": "c", "name": "comp", "desc": ""}, "gDeleteAng(s)": {"args": "s", "return": "a", "name": "gDeleteAng", "desc": ""}, "dsSend(ssnxwl)": {"args": "ssnxwl", "return": "n", "name": "dsSend", "desc": ""}, "gRemoveAllVector2s()": {"args": "", "return": "", "name": "gRemoveAllVector2s", "desc": ""}, "dsSend(ssxv4)": {"args": "ssxv4", "return": "n", "name": "dsSend", "desc": ""}, "npcGoRun(e:v)": {"args": "e:v", "return": "", "name": "npcGoRun", "desc": "Tells the NPC to run to position V"}, "mix(vvn)": {"args": "vvn", "return": "v", "name": "mix", "desc": "Combines vector 1's XYZ with vector 2's XYZ by a proportion given by argument 3 (between 0 and 1)"}, "setX(v:n)": {"args": "v:n", "return": "v", "name": "setX", "desc": "Returns a copy of the vector with X replaced (use as Vec = Vec:setX(...))"}, "inNoclip(e:)": {"args": "e:", "return": "n", "name": "inNoclip", "desc": ""}, "average(r:)": {"args": "r:", "return": "n", "name": "average", "desc": ""}, "dsGetEntity()": {"args": "", "return": "e", "name": "dsGetEntity", "desc": ""}, "j(q:)": {"args": "q:", "return": "n", "name": "j", "desc": ""}, "vec(xv4)": {"args": "xv4", "return": "v", "name": "vec", "desc": ""}, "weapon(e:s)": {"args": "e:s", "return": "e", "name": "weapon", "desc": ""}, "applyTorque(b:v)": {"args": "b:v", "return": "", "name": "applyTorque", "desc": ""}, "exp(n)": {"args": "n", "return": "n", "name": "exp", "desc": "Returns e to the power of the Argument (same as e()^N but shorter and faster this way)"}, "egpGetColor(xwl:nn)": {"args": "xwl:nn", "return": "xv4", "name": "egpGetColor", "desc": ""}, "clip2(e:)": {"args": "e:", "return": "n", "name": "clip2", "desc": ""}, "selfDestruct()": {"args": "", "return": "", "name": "selfDestruct", "desc": ""}, "egpFont(e:nsn)": {"args": "e:nsn", "return": "", "name": "egpFont", "desc": ""}, "attachmentPos(e:s)": {"args": "e:s", "return": "v", "name": "attachmentPos", "desc": ""}, "concat(r:s)": {"args": "r:s", "return": "s", "name": "concat", "desc": "Combines all strings with specified string in between and returns result"}, "setQuaternion(t:sq)": {"args": "t:sq", "return": "q", "name": "setQuaternion", "desc": ""}, "dsSend(ssnxrd)": {"args": "ssnxrd", "return": "n", "name": "dsSend", "desc": ""}, "abs(n)": {"args": "n", "return": "n", "name": "abs", "desc": "Returns the Magnitude of the Argument"}, "setElement(xm4:nnn)": {"args": "xm4:nnn", "return": "xm4", "name": "setElement", "desc": ""}, "inVehicle(e:)": {"args": "e:", "return": "n", "name": "inVehicle", "desc": ""}, "toString(xv2)": {"args": "xv2", "return": "s", "name": "toString", "desc": ""}, "holoShadow(nn)": {"args": "nn", "return": "", "name": "holoShadow", "desc": "Index, Shadow<br>Set to 0 to remove a hologram's shadow, 1 to display shadow"}, "table(xwl:s)": {"args": "xwl:s", "return": "t", "name": "table", "desc": ""}, "egpTriangle(e:nnnnnnn)": {"args": "e:nnnnnnn", "return": "", "name": "egpTriangle", "desc": ""}, "rangerOffset(vv)": {"args": "vv", "return": "xrd", "name": "rangerOffset", "desc": "You input two vector points, it returns ranger data"}, "dsSend(ssv)": {"args": "ssv", "return": "n", "name": "dsSend", "desc": ""}, "min(r:)": {"args": "r:", "return": "n", "name": "min", "desc": ""}, "soundStop(nn)": {"args": "nn", "return": "", "name": "soundStop", "desc": "Fades the sound stored at the first input's integer index in the second input's amount of seconds and removes the entry"}, "setBone(r:nb)": {"args": "r:nb", "return": "", "name": "setBone", "desc": ""}, "applyOffsetForce(b:vv)": {"args": "b:vv", "return": "", "name": "applyOffsetForce", "desc": ""}, "gtable(xwl:s)": {"args": "xwl:s", "return": "xgt", "name": "gtable", "desc": ""}, "hit(xrd:)": {"args": "xrd:", "return": "n", "name": "hit", "desc": ""}, "dupefinished()": {"args": "", "return": "n", "name": "dupefinished", "desc": ""}, "replace(s:ss)": {"args": "s:ss", "return": "s", "name": "replace", "desc": "Finds and replaces every occurrence of the first argument with the second argument"}, "setGtable(t:sxgt)": {"args": "t:sxgt", "return": "xgt", "name": "setGtable", "desc": ""}, "aimEntity(e:)": {"args": "e:", "return": "e", "name": "aimEntity", "desc": ""}, "lockPod(e:n)": {"args": "e:n", "return": "", "name": "lockPod", "desc": "1 locks and 0 unlocks vehicle"}, "gRemoveAllQuaternions()": {"args": "", "return": "", "name": "gRemoveAllQuaternions", "desc": ""}, "rangerIgnoreWorld(n)": {"args": "n", "return": "", "name": "rangerIgnoreWorld", "desc": "Default is 0, if any other value is given it will ignore world"}, "index(s:n)": {"args": "s:n", "return": "s", "name": "index", "desc": "Returns Nth letter of the string, formatted as a string."}, "x(m:)": {"args": "m:", "return": "v", "name": "x", "desc": ""}, "findToArray()": {"args": "", "return": "r", "name": "findToArray", "desc": ""}, "egpPosY1(xwl:nn)": {"args": "xwl:nn", "return": "", "name": "egpPosY1", "desc": ""}, "pushMatrix(r:m)": {"args": "r:m", "return": "", "name": "pushMatrix", "desc": ""}, "rotate(v:a)": {"args": "v:a", "return": "v", "name": "rotate", "desc": "Gets the rotated vector"}, "frac(n)": {"args": "n", "return": "n", "name": "frac", "desc": "Returns the Fractional part of the Argument (same as floor)"}, "setComplex(t:sc)": {"args": "t:sc", "return": "c", "name": "setComplex", "desc": ""}, "playerDamage()": {"args": "", "return": "n", "name": "playerDamage", "desc": ""}, "insertVector4(r:nxv4)": {"args": "r:nxv4", "return": "", "name": "insertVector4", "desc": ""}, "quat(v)": {"args": "v", "return": "q", "name": "quat", "desc": "Converts a vector to a quaternion (returns ''V''.x*i + ''V''.y*j + ''V''.z*k)"}, "egpGetElement(e:nn)": {"args": "e:nn", "return": "t", "name": "egpGetElement", "desc": ""}, "setTrails(e:nnnsvnnn)": {"args": "e:nnnsvnnn", "return": "", "name": "setTrails", "desc": "StartSize, EndSize, Length, Material, Color (RGB), Alpha, AttachmentID, Additive<br />Adds a trail to ''E'' with the specified attributes."}, "distance(xv2:xv2)": {"args": "xv2:xv2", "return": "n", "name": "distance", "desc": ""}, "random(nn)": {"args": "nn", "return": "n", "name": "random", "desc": "Returns a random floating-point number between the specified interval [''a <= x < b '']"}, "removeNumber(r:n)": {"args": "r:n", "return": "n", "name": "removeNumber", "desc": ""}, "hostname()": {"args": "", "return": "s", "name": "hostname", "desc": ""}, "lastSaid(e:)": {"args": "e:", "return": "s", "name": "lastSaid", "desc": ""}, "dsProbe(s)": {"args": "s", "return": "r", "name": "dsProbe", "desc": "Returns an array of the E2s which would have recieved a signal if you had sent it to the group ''S'' and the E2s scope."}, "insertEntity(r:ne)": {"args": "r:ne", "return": "", "name": "insertEntity", "desc": ""}, "shiftVector2(r:)": {"args": "r:", "return": "xv2", "name": "shiftVector2", "desc": ""}, "fileClk(s)": {"args": "s", "return": "n", "name": "fileClk", "desc": "Returns whether the execution was run because a file finished uploading and was that file of a specific file name."}, "mod(xv2n)": {"args": "xv2n", "return": "xv2", "name": "mod", "desc": ""}, "bOr(nn)": {"args": "nn", "return": "n", "name": "bOr", "desc": ""}, "dot(xv4:xv4)": {"args": "xv4:xv4", "return": "n", "name": "dot", "desc": ""}, "id(e:)": {"args": "e:", "return": "n", "name": "id", "desc": ""}, "mod(xv4n)": {"args": "xv4n", "return": "xv4", "name": "mod", "desc": ""}, "rotationAxis(q)": {"args": "q", "return": "v", "name": "rotationAxis", "desc": "Returns the axis of rotation (by coder0xff)"}, "dsSendDirect(sexm2)": {"args": "sexm2", "return": "n", "name": "dsSendDirect", "desc": ""}, "gDeleteNum(n)": {"args": "n", "return": "n", "name": "gDeleteNum", "desc": ""}, "gRemoveAllVector4s()": {"args": "", "return": "", "name": "gRemoveAllVector4s", "desc": ""}, "pushVector4(r:xv4)": {"args": "r:xv4", "return": "", "name": "pushVector4", "desc": ""}, "egpPosX(e:nn)": {"args": "e:nn", "return": "", "name": "egpPosX", "desc": ""}, "isWeapon(e:)": {"args": "e:", "return": "n", "name": "isWeapon", "desc": ""}, "rgb2hsv(v)": {"args": "v", "return": "v", "name": "rgb2hsv", "desc": "Converts ''V'' from the [http://en.wikipedia.org/wiki/RGB_color_space RGB color space] to the [http://en.wikipedia.org/wiki/HSV_color_space HSV color space]"}, "select(nr...)": {"args": "nr...", "return": "r", "name": "select", "desc": ""}, "perf()": {"args": "", "return": "n", "name": "perf", "desc": ""}, "dsGetNumber()": {"args": "", "return": "n", "name": "dsGetNumber", "desc": ""}, "toLocalAxis(e:v)": {"args": "e:v", "return": "v", "name": "toLocalAxis", "desc": "Transforms a world axis to an axis local to ''E''."}, "number(t:s)": {"args": "t:s", "return": "n", "name": "number", "desc": ""}, "cot(c)": {"args": "c", "return": "c", "name": "cot", "desc": "Calculates the cotangent of ''C''"}, "clamp(xv4xv4xv4)": {"args": "xv4xv4xv4", "return": "xv4", "name": "clamp", "desc": ""}, "findCanQuery()": {"args": "", "return": "n", "name": "findCanQuery", "desc": ""}, "dsSend(ssm)": {"args": "ssm", "return": "n", "name": "dsSend", "desc": ""}, "unshiftMatrix4(r:xm4)": {"args": "r:xm4", "return": "", "name": "unshiftMatrix4", "desc": ""}, "egpGetElements(e:n)": {"args": "e:n", "return": "r", "name": "egpGetElements", "desc": ""}, "egpPolyColor(e:nv)": {"args": "e:nv", "return": "", "name": "egpPolyColor", "desc": ""}, "findByClass(s)": {"args": "s", "return": "n", "name": "findByClass", "desc": "Find all entities with the given class"}, "matrix(q)": {"args": "q", "return": "m", "name": "matrix", "desc": "Converts ''Q'' to a transformation matrix"}, "dsSendDirect(srs)": {"args": "srs", "return": "n", "name": "dsSendDirect", "desc": ""}, "fileLoadList()": {"args": "", "return": "", "name": "fileLoadList", "desc": ""}, "rotationVector(q)": {"args": "q", "return": "v", "name": "rotationVector", "desc": "Returns the rotation vector - rotation axis where magnitude is the angle of rotation in degress (by coder0xff)"}, "removeAngle(xgt:s)": {"args": "xgt:s", "return": "a", "name": "removeAngle", "desc": ""}, "dsGetBone()": {"args": "", "return": "b", "name": "dsGetBone", "desc": ""}, "min(xv4xv4)": {"args": "xv4xv4", "return": "xv4", "name": "min", "desc": ""}, "findIncludePlayerProps(s)": {"args": "s", "return": "", "name": "findIncludePlayerProps", "desc": "Include entities owned by this player from future finds, and remove others not in the whitelist"}, "clk(s)": {"args": "s", "return": "n", "name": "clk", "desc": "Returns 1 if the current execution was caused by the inserted name"}, "toWorld(b:v)": {"args": "b:v", "return": "v", "name": "toWorld", "desc": "Transforms ''V'' from local coordinates (as seen from ''B'') to world coordinates"}, "keyAttack1(e:)": {"args": "e:", "return": "n", "name": "keyAttack1", "desc": ""}, "chatClk()": {"args": "", "return": "n", "name": "chatClk", "desc": ""}, "fileListTable()": {"args": "", "return": "t", "name": "fileListTable", "desc": ""}, "normalized(xv4:)": {"args": "xv4:", "return": "xv4", "name": "normalized", "desc": ""}, "removeTable(xgt:s)": {"args": "xgt:s", "return": "t", "name": "removeTable", "desc": ""}, "steamID(e:)": {"args": "e:", "return": "s", "name": "steamID", "desc": ""}, "dsProbe(sn)": {"args": "sn", "return": "r", "name": "dsProbe", "desc": "Returns an array of the E2s which would have recieved a signal if you had sent it to the group ''S'' and the scope ''N''."}, "toString(xv4:)": {"args": "xv4:", "return": "s", "name": "toString", "desc": ""}, "toString(a)": {"args": "a", "return": "s", "name": "toString", "desc": ""}, "dsGetArray()": {"args": "", "return": "r", "name": "dsGetArray", "desc": ""}, "rangerHull(nvv)": {"args": "nvv", "return": "xrd", "name": "rangerHull", "desc": "Input: Distance, Hull MinSize, Hull MaxSize"}, "rgb2digi(vn)": {"args": "vn", "return": "n", "name": "rgb2digi", "desc": "Converts an RGB vector ''V'' to a number in digital screen format. ''N'' Specifies a mode, either 0, 2 or 3, corresponding to Digital Screen color modes."}, "setWirelink(xwl:sxwl)": {"args": "xwl:sxwl", "return": "xwl", "name": "setWirelink", "desc": ""}, "egpPosY2(e:nn)": {"args": "e:nn", "return": "", "name": "egpPosY2", "desc": ""}, "setVector(r:nv)": {"args": "r:nv", "return": "v", "name": "setVector", "desc": ""}, "match(s:s)": {"args": "s:s", "return": "r", "name": "match", "desc": ""}, "signalClk(ssn)": {"args": "ssn", "return": "n", "name": "signalClk", "desc": ""}, "gGetShare()": {"args": "", "return": "n", "name": "gGetShare", "desc": ""}, "matrix2()": {"args": "", "return": "xm2", "name": "matrix2", "desc": ""}, "popComplex(r:)": {"args": "r:", "return": "c", "name": "popComplex", "desc": ""}, "acos(c)": {"args": "c", "return": "c", "name": "acos", "desc": "Calculates the inverse cosine of ''C''"}, "complex(xwl:s)": {"args": "xwl:s", "return": "c", "name": "complex", "desc": ""}, "coth(c)": {"args": "c", "return": "c", "name": "coth", "desc": "Calculates the hyperbolic cotangent of ''C''"}, "isFrozen(b:)": {"args": "b:", "return": "n", "name": "isFrozen", "desc": ""}, "positive(xv2)": {"args": "xv2", "return": "xv2", "name": "positive", "desc": ""}, "left(s:n)": {"args": "s:n", "return": "s", "name": "left", "desc": "Returns N amount of characters starting from the leftmost character"}, "floor(v)": {"args": "v", "return": "v", "name": "floor", "desc": "Rounds XYZ down to the nearest integer"}, "matrix2(t:s)": {"args": "t:s", "return": "xm2", "name": "matrix2", "desc": ""}, "lastSaidTeam()": {"args": "", "return": "n", "name": "lastSaidTeam", "desc": ""}, "shift(xv2)": {"args": "xv2", "return": "xv2", "name": "shift", "desc": ""}, "timer(sn)": {"args": "sn", "return": "", "name": "timer", "desc": "Sets a one-time timer with entered name and delay in milliseconds"}, "round(v)": {"args": "v", "return": "v", "name": "round", "desc": "Rounds XYZ to the nearest integer"}, "setComplex(xwl:sc)": {"args": "xwl:sc", "return": "c", "name": "setComplex", "desc": ""}, "teams()": {"args": "", "return": "r", "name": "teams", "desc": ""}, "soundPlay(nnsn)": {"args": "nnsn", "return": "", "name": "soundPlay", "desc": "soundPlay(int Index, int Duration, string Path to File, int FadeTime)"}, "gTable(s)": {"args": "s", "return": "xgt", "name": "gTable", "desc": "Returns a non-shared gtable with the group ''S'' "}, "sec(n)": {"args": "n", "return": "n", "name": "sec", "desc": "Returns the secant of N degrees "}, "findClipToBox(vv)": {"args": "vv", "return": "n", "name": "findClipToBox", "desc": ""}, "lower(s:)": {"args": "s:", "return": "s", "name": "lower", "desc": ""}, "driver(e:)": {"args": "e:", "return": "e", "name": "driver", "desc": ""}, "egpText(xwl:nsxv2)": {"args": "xwl:nsxv2", "return": "", "name": "egpText", "desc": ""}, "boneCount(e:)": {"args": "e:", "return": "n", "name": "boneCount", "desc": ""}, "gDeleteNum(s)": {"args": "s", "return": "n", "name": "gDeleteNum", "desc": ""}, "egpBoxOutline(xwl:nnnnn)": {"args": "xwl:nnnnn", "return": "", "name": "egpBoxOutline", "desc": ""}, "dsClearGroups()": {"args": "", "return": "", "name": "dsClearGroups", "desc": ""}, "hitNormal(xrd:)": {"args": "xrd:", "return": "v", "name": "hitNormal", "desc": ""}, "explode(s:s)": {"args": "s:s", "return": "r", "name": "explode", "desc": "Splits the string into an array, along the boundaries formed by the string S. See also [[String.Explode]]"}, "gSetEnt(ne)": {"args": "ne", "return": "", "name": "gSetEnt", "desc": ""}, "teamScore(n:)": {"args": "n:", "return": "n", "name": "teamScore", "desc": ""}, "cross(xv2:xv2)": {"args": "xv2:xv2", "return": "n", "name": "cross", "desc": ""}, "egpTextLayout(xwl:nsxv2xv2)": {"args": "xwl:nsxv2xv2", "return": "", "name": "egpTextLayout", "desc": ""}, "hintDriver(e:sn)": {"args": "e:sn", "return": "n", "name": "hintDriver", "desc": "Displays a hint popup to the driver of vehicle E, with message ''S'' for ''N'' seconds (''N'' being clamped between 0.7 and 7). Same return value as printDriver."}, "holoScale(n)": {"args": "n", "return": "v", "name": "holoScale", "desc": "Index<br>Returns the scale of the given hologram"}, "sqrt(n)": {"args": "n", "return": "n", "name": "sqrt", "desc": "Returns the Square Root of the Argument"}, "select(nv...)": {"args": "nv...", "return": "v", "name": "select", "desc": ""}, "egpPolyColor(e:nxv4)": {"args": "e:nxv4", "return": "", "name": "egpPolyColor", "desc": ""}, "shiftVector(r:)": {"args": "r:", "return": "v", "name": "shiftVector", "desc": ""}, "quat(c)": {"args": "c", "return": "q", "name": "quat", "desc": "Creates a quaternion with real and \"i\" parts equal to ''C''"}, "gGetNum(n)": {"args": "n", "return": "n", "name": "gGetNum", "desc": ""}, "cross(v:v)": {"args": "v:v", "return": "v", "name": "cross", "desc": "Gets the 3D vector cross product"}, "parentBone(e:)": {"args": "e:", "return": "b", "name": "parentBone", "desc": ""}, "string(xwl:s)": {"args": "xwl:s", "return": "s", "name": "string", "desc": "Deprecated. Use XWL[S,string] instead."}, "egpColor(e:nnnn)": {"args": "e:nnnn", "return": "", "name": "egpColor", "desc": ""}, "egpPosX1(e:nn)": {"args": "e:nn", "return": "", "name": "egpPosX1", "desc": ""}, "setAngle(xwl:sa)": {"args": "xwl:sa", "return": "a", "name": "setAngle", "desc": ""}, "y(v:)": {"args": "v:", "return": "n", "name": "y", "desc": ""}, "pushMatrix2(r:xm2)": {"args": "r:xm2", "return": "", "name": "pushMatrix2", "desc": ""}, "round(vn)": {"args": "vn", "return": "v", "name": "round", "desc": "Rounds XYZ to argument 2's decimal precision"}, "setRow(m:nv)": {"args": "m:nv", "return": "m", "name": "setRow", "desc": "Sets the values of a row. The first argument given specifies the row, the vector contains the values to set"}, "gRemoveAllEntitys()": {"args": "", "return": "", "name": "gRemoveAllEntitys", "desc": ""}, "writeString(xwl:snnnn)": {"args": "xwl:snnnn", "return": "", "name": "writeString", "desc": "As above, with an extra argument for background colour. 3-digit RGB again."}, "hasConstraints(e:s)": {"args": "e:s", "return": "n", "name": "hasConstraints", "desc": "Returns the number of the constraints ''E'' has with the given constraint type (see the types list below)"}, "entity(xwl:s)": {"args": "xwl:s", "return": "e", "name": "entity", "desc": "Deprecated. Use XWL[S,entity] instead."}, "holoClip(nnvvn)": {"args": "nnvvn", "return": "", "name": "holoClip", "desc": ""}, "angVelVector(b:)": {"args": "b:", "return": "v", "name": "angVelVector", "desc": ""}, "max(vv)": {"args": "vv", "return": "v", "name": "max", "desc": "Returns the vector with the greatest length"}, "bNot(n)": {"args": "n", "return": "n", "name": "bNot", "desc": ""}, "rangerFilter(r)": {"args": "r", "return": "", "name": "rangerFilter", "desc": "Feed an array of entities you don't want the trace to hit"}, "egpPoly(e:n)": {"args": "e:n", "return": "", "name": "egpPoly", "desc": ""}, "gRemoveAllMatrix4s()": {"args": "", "return": "", "name": "gRemoveAllMatrix4s", "desc": ""}, "round(nn)": {"args": "nn", "return": "n", "name": "round", "desc": " Rounds Argument 1 to Argument 2's decimal precision"}, "count(r:)": {"args": "r:", "return": "n", "name": "count", "desc": ""}, "signalClearOnRemove()": {"args": "", "return": "", "name": "signalClearOnRemove", "desc": ""}, "dsGetAngle()": {"args": "", "return": "a", "name": "dsGetAngle", "desc": ""}, "getColor(e:)": {"args": "e:", "return": "v", "name": "getColor", "desc": ""}, "hasInput(xwl:s)": {"args": "xwl:s", "return": "n", "name": "hasInput", "desc": "Returns true if the linked component has an input of the specified name."}, "matrix2(m)": {"args": "m", "return": "xm2", "name": "matrix2", "desc": "Converts a 3x3 matrix into a 2x2 matrix - all (i,3) and (3,j) are omitted"}, "setColor(e:v)": {"args": "e:v", "return": "", "name": "setColor", "desc": "Changes the RGB color of an entity (leaves alpha alone), using a vector with values (R,G,B)"}, "reset()": {"args": "", "return": "", "name": "reset", "desc": ""}, "wrap(nn)": {"args": "nn", "return": "n", "name": "wrap", "desc": ""}, "popNumber(r:)": {"args": "r:", "return": "n", "name": "popNumber", "desc": ""}, "fileWrite(ss)": {"args": "ss", "return": "", "name": "fileWrite", "desc": "Writes a file to your data folder (automatically uploads to server). First argument is the file name, second argument is the data to be written."}, "signalSetGroup(s)": {"args": "s", "return": "", "name": "signalSetGroup", "desc": "Sets the E-2's current signal group to ''S'', this is applied during runOnSignal, signalSend, and signalSetOnRemove calls, so call it first."}, "cot(n)": {"args": "n", "return": "n", "name": "cot", "desc": "Returns the cotangent of N degrees "}, "signalSenderId()": {"args": "", "return": "n", "name": "signalSenderId", "desc": ""}, "pushVector(r:v)": {"args": "r:v", "return": "", "name": "pushVector", "desc": ""}, "hsv2rgb(v)": {"args": "v", "return": "v", "name": "hsv2rgb", "desc": "Converts ''V'' from the [http://en.wikipedia.org/wiki/HSV_color_space HSV color space] to the [http://en.wikipedia.org/wiki/RGB_color_space RGB color space]"}, "findIncludePlayer(e)": {"args": "e", "return": "", "name": "findIncludePlayer", "desc": "Include this player in future finds, and remove other entities not in the entity whitelist"}, "egpPos1(e:nnn)": {"args": "e:nnn", "return": "", "name": "egpPos1", "desc": ""}, "dsSendDirect(srr)": {"args": "srr", "return": "n", "name": "dsSendDirect", "desc": ""}, "toString(b)": {"args": "b", "return": "s", "name": "toString", "desc": ""}, "isHiSpeed(xwl:)": {"args": "xwl:", "return": "n", "name": "isHiSpeed", "desc": ""}, "findClearWhiteEntityList()": {"args": "", "return": "", "name": "findClearWhiteEntityList", "desc": ""}, "i()": {"args": "", "return": "c", "name": "i", "desc": ""}, "writeString(xwl:snnn)": {"args": "xwl:snnn", "return": "", "name": "writeString", "desc": "As above, with an extra argument for the text colour. This is in the form of a 3-digit RGB code. 0 is black, while 999 is white, 900 is pure red and so on."}, "toString(n:)": {"args": "n:", "return": "s", "name": "toString", "desc": ""}, "vec(xv2n)": {"args": "xv2n", "return": "v", "name": "vec", "desc": ""}, "gRemoveAllMatrix4s(s)": {"args": "s", "return": "", "name": "gRemoveAllMatrix4s", "desc": ""}, "sinhr(n)": {"args": "n", "return": "n", "name": "sinhr", "desc": ""}, "popVector4(r:)": {"args": "r:", "return": "xv4", "name": "popVector4", "desc": ""}, "concmd(s)": {"args": "s", "return": "n", "name": "concmd", "desc": "Takes a string and executes it in console. Returns 1 if it succeeded and 0 if it failed.<br />The client must enable this in the console with \"wire_expression2_concmd 1\". \"wire_expression2_concmd_whitelist\" allows you to choose which commands can be used.[http://www.wiremod.com/forum/151800-post12.html]"}, "gRemoveAllStrings()": {"args": "", "return": "", "name": "gRemoveAllStrings", "desc": ""}, "floor(an)": {"args": "an", "return": "a", "name": "floor", "desc": "Rounds PYR down to argument 2's decimal precision"}, "setY(xv4:n)": {"args": "xv4:n", "return": "xv4", "name": "setY", "desc": ""}, "setSkin(e:n)": {"args": "e:n", "return": "", "name": "setSkin", "desc": "Sets ''E'''s skin number."}, "setElement(xm2:nnn)": {"args": "xm2:nnn", "return": "xm2", "name": "setElement", "desc": ""}, "ln(n)": {"args": "n", "return": "n", "name": "ln", "desc": " Returns the logarithm to base e of the Argument"}, "egpPosX2(e:nn)": {"args": "e:nn", "return": "", "name": "egpPosX2", "desc": ""}, "find()": {"args": "", "return": "e", "name": "find", "desc": ""}, "inrange(xv2xv2xv2)": {"args": "xv2xv2xv2", "return": "n", "name": "inrange", "desc": ""}, "inrange(nnn)": {"args": "nnn", "return": "n", "name": "inrange", "desc": ""}, "removeQuaternion(xgt:s)": {"args": "xgt:s", "return": "q", "name": "removeQuaternion", "desc": ""}, "egpTextAlign(e:nnn)": {"args": "e:nnn", "return": "", "name": "egpTextAlign", "desc": ""}, "boxMax(e:)": {"args": "e:", "return": "v", "name": "boxMax", "desc": ""}, "egpPos2(e:nnn)": {"args": "e:nnn", "return": "", "name": "egpPos2", "desc": ""}, "atan(nn)": {"args": "nn", "return": "n", "name": "atan", "desc": ""}, "round(xv4)": {"args": "xv4", "return": "xv4", "name": "round", "desc": ""}, "egpRemove(e:n)": {"args": "e:n", "return": "", "name": "egpRemove", "desc": ""}, "transpose(m)": {"args": "m", "return": "m", "name": "transpose", "desc": "Returns the transpose of a matrix"}, "dsSend(sst)": {"args": "sst", "return": "n", "name": "dsSend", "desc": ""}, "vec()": {"args": "", "return": "v", "name": "vec", "desc": ""}, "setXyz(xwl:v)": {"args": "xwl:v", "return": "", "name": "setXyz", "desc": "Sets the X/Y/Z to the corresponding values in the vector."}, "runOnLast(n)": {"args": "n", "return": "", "name": "runOnLast", "desc": "If <activate> != 0, the chip will run once when it is removed, setting the last() flag when it does."}, "dsGetMatrix4()": {"args": "", "return": "xm4", "name": "dsGetMatrix4", "desc": ""}, "ceil(xv2n)": {"args": "xv2n", "return": "xv2", "name": "ceil", "desc": ""}, "rotate(xv2:n)": {"args": "xv2:n", "return": "xv2", "name": "rotate", "desc": ""}, "applyOffsetForce(e:vv)": {"args": "e:vv", "return": "", "name": "applyOffsetForce", "desc": "Applies force to the entity according to the first vector from the location of the second"}, "gRemoveAllWirelinks()": {"args": "", "return": "", "name": "gRemoveAllWirelinks", "desc": ""}, "isFrozen(e:)": {"args": "e:", "return": "n", "name": "isFrozen", "desc": ""}, "select(nxrd...)": {"args": "nxrd...", "return": "xrd", "name": "select", "desc": ""}, "toWorldAxis(e:v)": {"args": "e:v", "return": "v", "name": "toWorldAxis", "desc": "Transforms an axis local to ''E'' to a global axis."}, "egpPos(e:nxv2)": {"args": "e:nxv2", "return": "", "name": "egpPos", "desc": ""}, "setColumn(m:nv)": {"args": "m:nv", "return": "m", "name": "setColumn", "desc": "Sets the values of a column. The first argument given specifies the column, the vector contains the values to set"}, "findIncludeClass(s)": {"args": "s", "return": "", "name": "findIncludeClass", "desc": "Include entities with this class (or partial class name) in future finds, and remove others not in the whitelist"}, "ejectPod(e:)": {"args": "e:", "return": "", "name": "ejectPod", "desc": ""}, "egpColor(xwl:nnnnn)": {"args": "xwl:nnnnn", "return": "", "name": "egpColor", "desc": ""}, "array()": {"args": "", "return": "r", "name": "array", "desc": ""}, "tanh(n)": {"args": "n", "return": "n", "name": "tanh", "desc": "Returns the hyperbolic tangent of N"}, "entity(xwl:)": {"args": "xwl:", "return": "e", "name": "entity", "desc": ""}, "sub(s:nn)": {"args": "s:nn", "return": "s", "name": "sub", "desc": "Returns a substring, starting at the first number argument and ending at the second"}, "soundStop(sn)": {"args": "sn", "return": "", "name": "soundStop", "desc": "Fades the sound stored at the string index in the integer input's amount of seconds and removes the entry"}, "matrix(xm2)": {"args": "xm2", "return": "m", "name": "matrix", "desc": ""}, "findClipFromBox(vv)": {"args": "vv", "return": "n", "name": "findClipFromBox", "desc": ""}, "dsSendDirect(see)": {"args": "see", "return": "n", "name": "dsSendDirect", "desc": ""}, "unshiftMatrix2(r:xm2)": {"args": "r:xm2", "return": "", "name": "unshiftMatrix2", "desc": ""}, "gRemoveAllMatrix2s()": {"args": "", "return": "", "name": "gRemoveAllMatrix2s", "desc": ""}, "angles(b:)": {"args": "b:", "return": "a", "name": "angles", "desc": ""}, "select(ne...)": {"args": "ne...", "return": "e", "name": "select", "desc": ""}, "right(b:)": {"args": "b:", "return": "v", "name": "right", "desc": ""}, "fileLoaded(s)": {"args": "s", "return": "n", "name": "fileLoaded", "desc": "Returns whether or not the file has been loaded onto the server."}, "clamp(vvv)": {"args": "vvv", "return": "v", "name": "clamp", "desc": "Clamps vector 1's XYZ between the XYZ of vector 2(min) and vector 3(max)"}, "height(e:)": {"args": "e:", "return": "n", "name": "height", "desc": ""}, "removeMatrix2(xgt:s)": {"args": "xgt:s", "return": "xm2", "name": "removeMatrix2", "desc": ""}, "angnorm(n)": {"args": "n", "return": "n", "name": "angnorm", "desc": "Gets the normalized angle of a number"}, "matrix4(xm2)": {"args": "xm2", "return": "xm4", "name": "matrix4", "desc": ""}, "vector(r:n)": {"args": "r:n", "return": "v", "name": "vector", "desc": ""}, "egpTriangle(e:nxv2xv2xv2v)": {"args": "e:nxv2xv2xv2v", "return": "", "name": "egpTriangle", "desc": ""}, "round(xv2n)": {"args": "xv2n", "return": "xv2", "name": "round", "desc": ""}, "dsSendDirect(srm)": {"args": "srm", "return": "n", "name": "dsSendDirect", "desc": ""}, "map()": {"args": "", "return": "s", "name": "map", "desc": ""}, "egpTextLayout(e:nsnnnn)": {"args": "e:nsnnnn", "return": "", "name": "egpTextLayout", "desc": ""}, "egpTextLayout(xwl:nsnnnnxv4)": {"args": "xwl:nsnnnnxv4", "return": "", "name": "egpTextLayout", "desc": ""}, "findAllowClass(s)": {"args": "s", "return": "", "name": "findAllowClass", "desc": "Remove entities with this class (or partial class name) from the blacklist"}, "signalSetOnRemove(sn)": {"args": "sn", "return": "", "name": "signalSetOnRemove", "desc": "Sets the signal that the chip sends when it is removed from the world."}, "writeString(xwl:snnnvn)": {"args": "xwl:snnnvn", "return": "", "name": "writeString", "desc": ""}, "setRanger(xwl:sxrd)": {"args": "xwl:sxrd", "return": "xrd", "name": "setRanger", "desc": ""}, "hasConstraints(e:)": {"args": "e:", "return": "n", "name": "hasConstraints", "desc": ""}, "changed(xgt)": {"args": "xgt", "return": "n", "name": "changed", "desc": ""}, "egpBoxOutline(e:nnnnnxv4)": {"args": "e:nnnnnxv4", "return": "", "name": "egpBoxOutline", "desc": ""}, "dsSendDirect(src)": {"args": "src", "return": "n", "name": "dsSendDirect", "desc": ""}, "random()": {"args": "", "return": "n", "name": "random", "desc": ""}, "format(s...)": {"args": "s...", "return": "s", "name": "format", "desc": "Formats a values exactly like Lua's [http://www.lua.org/manual/5.1/manual.html#pdf-string.format string.format]. Any number and type of parameter can be passed through the \"...\". Prints errors to the chat area."}, "clamp(nnn)": {"args": "nnn", "return": "n", "name": "clamp", "desc": "If Arg1 <= Arg2 (min) returns Arg2; If Arg1 >= Arg3 (max) returns Arg3; otherwise returns Arg1."}, "gSetNum(sn)": {"args": "sn", "return": "", "name": "gSetNum", "desc": ""}, "select(ns...)": {"args": "ns...", "return": "s", "name": "select", "desc": ""}, "forward(b:)": {"args": "b:", "return": "v", "name": "forward", "desc": ""}, "log(nc)": {"args": "nc", "return": "c", "name": "log", "desc": "Calculates the logarithm of ''C'' to a real base ''N''"}, "popString(r:)": {"args": "r:", "return": "s", "name": "popString", "desc": ""}, "dsSend(ssnn)": {"args": "ssnn", "return": "n", "name": "dsSend", "desc": ""}, "dsSendDirect(sexwl)": {"args": "sexwl", "return": "n", "name": "dsSendDirect", "desc": ""}, "rangerPersist(n)": {"args": "n", "return": "", "name": "rangerPersist", "desc": "Passing 0 (the default) resets all ranger flags and filters every execution and after calling ranger/rangerOffset. Passing anything else will make the flags and filters persist until they're changed again."}, "det(m)": {"args": "m", "return": "n", "name": "det", "desc": "Returns the determinant of a matrix (Does not work for 4x4 matrices)"}, "dsGetTable()": {"args": "", "return": "t", "name": "dsGetTable", "desc": ""}, "ceil(nn)": {"args": "nn", "return": "n", "name": "ceil", "desc": "Rounds Argument 1 up to Argument 2's decimal precision"}, "changed(xv4)": {"args": "xv4", "return": "n", "name": "changed", "desc": ""}, "egpGetText(e:nn)": {"args": "e:nn", "return": "s", "name": "egpGetText", "desc": ""}, "diagonal(xm4)": {"args": "xm4", "return": "xv4", "name": "diagonal", "desc": ""}, "findClipToClass(s)": {"args": "s", "return": "n", "name": "findClipToClass", "desc": "Filters the list of entities by removing all entities that are NOT of this class"}, "steamFriends(e:)": {"args": "e:", "return": "r", "name": "steamFriends", "desc": ""}, "removeVector2(r:n)": {"args": "r:n", "return": "xv2", "name": "removeVector2", "desc": ""}, "findExcludePlayer(s)": {"args": "s", "return": "", "name": "findExcludePlayer", "desc": "Exclude this player from future finds (put it on the entity blacklist)"}, "rangerAngle(nnn)": {"args": "nnn", "return": "xrd", "name": "rangerAngle", "desc": "You input the distance, x-angle and y-angle (both in degrees) it returns ranger data"}, "egpLoadFrame(xwl:n)": {"args": "xwl:n", "return": "", "name": "egpLoadFrame", "desc": ""}, "z(m:)": {"args": "m:", "return": "v", "name": "z", "desc": ""}, "dsSendDirect(sexrd)": {"args": "sexrd", "return": "n", "name": "dsSendDirect", "desc": ""}, "angle(xwl:s)": {"args": "xwl:s", "return": "a", "name": "angle", "desc": ""}, "dsSendDirect(srq)": {"args": "srq", "return": "n", "name": "dsSendDirect", "desc": ""}, "secondaryAmmoType(e:)": {"args": "e:", "return": "s", "name": "secondaryAmmoType", "desc": ""}, "mix(xv2xv2n)": {"args": "xv2xv2n", "return": "xv2", "name": "mix", "desc": ""}, "isUnderWater(e:)": {"args": "e:", "return": "n", "name": "isUnderWater", "desc": ""}, "gShare(n)": {"args": "n", "return": "", "name": "gShare", "desc": "Sets wether or not you want to share the variables. (1/0) Remember that there are two tables for each group: one which is shared and one which is not; values do not transition between the two."}, "findRE(s:sn)": {"args": "s:sn", "return": "n", "name": "findRE", "desc": ""}, "dsGetType()": {"args": "", "return": "s", "name": "dsGetType", "desc": ""}, "matrix(e)": {"args": "e", "return": "m", "name": "matrix", "desc": "Creates a reference frame matrix from an entity's local direction vectors by columns in the order ( x, y, z )"}, "mod(nn)": {"args": "nn", "return": "n", "name": "mod", "desc": ""}, "dsSend(sse)": {"args": "sse", "return": "n", "name": "dsSend", "desc": ""}, "egpSetText(e:ns)": {"args": "e:ns", "return": "", "name": "egpSetText", "desc": ""}, "soundPlay(e:snsn)": {"args": "e:snsn", "return": "", "name": "soundPlay", "desc": ""}, "egpToMouse(xwl:e)": {"args": "xwl:e", "return": "xv2", "name": "egpToMouse", "desc": ""}, "matrix4(a)": {"args": "a", "return": "xm4", "name": "matrix4", "desc": "Returns a 4x4 reference frame matrix as described by the angle ''A''. Multiplying by this matrix will be the same as rotating by the given angle."}, "egpCircle(e:nnnnnv)": {"args": "e:nnnnnv", "return": "", "name": "egpCircle", "desc": ""}, "quaternion(xwl:s)": {"args": "xwl:s", "return": "q", "name": "quaternion", "desc": ""}, "egpMaterial(e:ns)": {"args": "e:ns", "return": "", "name": "egpMaterial", "desc": ""}, "egpPolyColor(xwl:nv...)": {"args": "xwl:nv...", "return": "", "name": "egpPolyColor", "desc": ""}, "setQuaternion(xwl:sq)": {"args": "xwl:sq", "return": "q", "name": "setQuaternion", "desc": ""}, "findClearBlackList()": {"args": "", "return": "", "name": "findClearBlackList", "desc": ""}, "setGtable(xwl:sxgt)": {"args": "xwl:sxgt", "return": "xgt", "name": "setGtable", "desc": ""}, "isCrouch(e:)": {"args": "e:", "return": "n", "name": "isCrouch", "desc": ""}, "setMatrix4(t:sxm4)": {"args": "t:sxm4", "return": "xm4", "name": "setMatrix4", "desc": ""}, "clear(t:)": {"args": "t:", "return": "t", "name": "clear", "desc": ""}, "applyForce(v)": {"args": "v", "return": "", "name": "applyForce", "desc": "Applies force according to the vector given (Forces independently on each axis unlike a vector thruster)"}, "getSkin(e:)": {"args": "e:", "return": "n", "name": "getSkin", "desc": ""}, "dsSendDirect(srxwl)": {"args": "srxwl", "return": "n", "name": "dsSendDirect", "desc": ""}, "changed(v)": {"args": "v", "return": "n", "name": "changed", "desc": ""}, "findPlayerUpdateRate()": {"args": "", "return": "n", "name": "findPlayerUpdateRate", "desc": ""}, "toNumber(s:)": {"args": "s:", "return": "n", "name": "toNumber", "desc": ""}, "removeRanger(xgt:s)": {"args": "xgt:s", "return": "xrd", "name": "removeRanger", "desc": ""}, "matrix4(xv4xv4xv4xv4)": {"args": "xv4xv4xv4xv4", "return": "xm4", "name": "matrix4", "desc": ""}, "quat()": {"args": "", "return": "q", "name": "quat", "desc": ""}, "egpTriangle(e:nxv2xv2xv2)": {"args": "e:nxv2xv2xv2", "return": "", "name": "egpTriangle", "desc": ""}, "signalGroup()": {"args": "", "return": "s", "name": "signalGroup", "desc": ""}, "pushEntity(r:e)": {"args": "r:e", "return": "", "name": "pushEntity", "desc": ""}, "velL(e:)": {"args": "e:", "return": "v", "name": "velL", "desc": ""}, "egpGetSize(xwl:nn)": {"args": "xwl:nn", "return": "xv2", "name": "egpGetSize", "desc": ""}, "eyeAngles(e:)": {"args": "e:", "return": "a", "name": "eyeAngles", "desc": ""}, "hideChat(n)": {"args": "n", "return": "", "name": "hideChat", "desc": "If ''N'' != 0, hide the chat message that is currently being processed."}, "normalized(xv2:)": {"args": "xv2:", "return": "xv2", "name": "normalized", "desc": ""}, "sinr(n)": {"args": "n", "return": "n", "name": "sinr", "desc": "Returns the sine of N radians "}, "egpGetElements(xwl:n)": {"args": "xwl:n", "return": "r", "name": "egpGetElements", "desc": ""}, "normalized(v:)": {"args": "v:", "return": "v", "name": "normalized", "desc": ""}, "positive(v)": {"args": "v", "return": "v", "name": "positive", "desc": "Returns a vector containing the positive value of each vector component, equivalent to abs(N)"}, "gDeleteAllEnt()": {"args": "", "return": "", "name": "gDeleteAllEnt", "desc": ""}, "ceil(xv2)": {"args": "xv2", "return": "xv2", "name": "ceil", "desc": ""}, "trimLeft(s:)": {"args": "s:", "return": "s", "name": "trimLeft", "desc": ""}, "reverse(s:)": {"args": "s:", "return": "s", "name": "reverse", "desc": ""}, "findExcludeModel(s)": {"args": "s", "return": "", "name": "findExcludeModel", "desc": "Exclude entities with this model (or partial model name) from future finds"}, "egpText(e:nsnnv)": {"args": "e:nsnnv", "return": "", "name": "egpText", "desc": ""}, "egpTriangle(xwl:nxv2xv2xv2)": {"args": "xwl:nxv2xv2xv2", "return": "", "name": "egpTriangle", "desc": ""}, "holoRenderFX(nn)": {"args": "nn", "return": "", "name": "holoRenderFX", "desc": "Index, Render FX #<br>Changes the RenderFX for a hologram"}, "eye(e:)": {"args": "e:", "return": "v", "name": "eye", "desc": ""}, "getAlpha(e:)": {"args": "e:", "return": "n", "name": "getAlpha", "desc": ""}, "mod(vv)": {"args": "vv", "return": "v", "name": "mod", "desc": "Returns the remainder after the components of vector 1 have been divided by the components of vector 2"}, "writeString(xwl:snnvnn)": {"args": "xwl:snnvnn", "return": "", "name": "writeString", "desc": ""}, "isConstrainedTo(e:sn)": {"args": "e:sn", "return": "e", "name": "isConstrainedTo", "desc": ""}, "shiftR(a)": {"args": "a", "return": "a", "name": "shiftR", "desc": "Shifts the angle's components right:  shiftR( p,y,r ) = ( r,p,y )"}, "vector2(xwl:s)": {"args": "xwl:s", "return": "xv2", "name": "vector2", "desc": ""}, "egpBoxOutline(xwl:nxv2xv2v)": {"args": "xwl:nxv2xv2v", "return": "", "name": "egpBoxOutline", "desc": ""}, "dsGetVector()": {"args": "", "return": "v", "name": "dsGetVector", "desc": ""}, "z(xv4:)": {"args": "xv4:", "return": "n", "name": "z", "desc": ""}, "armor(e:)": {"args": "e:", "return": "n", "name": "armor", "desc": ""}, "log(c)": {"args": "c", "return": "c", "name": "log", "desc": "Calculates the natural logarithm of ''C''"}, "egpPos(xwl:nxv2)": {"args": "xwl:nxv2", "return": "", "name": "egpPos", "desc": ""}, "writeString(xwl:snnvvn)": {"args": "xwl:snnvvn", "return": "", "name": "writeString", "desc": ""}, "right(e:)": {"args": "e:", "return": "v", "name": "right", "desc": ""}, "replaceRE(s:ss)": {"args": "s:ss", "return": "s", "name": "replaceRE", "desc": "Finds and replaces every occurrence of the first argument using REGEX with the second argument"}, "gTable(sn)": {"args": "sn", "return": "xgt", "name": "gTable", "desc": "Returns a gtable with the group ''S''. ''N'' determines whether or not it is shared.  Remember that there are two tables: one which is shared and one which is not; values do not transition between the two."}, "aimBone(e:)": {"args": "e:", "return": "b", "name": "aimBone", "desc": ""}, "egpBoxOutline(e:nxv2xv2xv4)": {"args": "e:nxv2xv2xv4", "return": "", "name": "egpBoxOutline", "desc": ""}, "holoClipEnabled(nnn)": {"args": "nnn", "return": "", "name": "holoClipEnabled", "desc": ""}, "findDisallowPlayer(s)": {"args": "s", "return": "", "name": "findDisallowPlayer", "desc": "Remove this player from the entity whitelist"}, "toChar(n)": {"args": "n", "return": "s", "name": "toChar", "desc": "Returns a one-character string from its [http://en.wikipedia.org/wiki/ASCII ASCII code], where 32 \u2264 argument 1 \u2264 255. An empty string is returned for numbers outside that range."}, "name(e:)": {"args": "e:", "return": "s", "name": "name", "desc": ""}, "dsSendDirect(srb)": {"args": "srb", "return": "n", "name": "dsSendDirect", "desc": ""}, "soundVolume(nn)": {"args": "nn", "return": "", "name": "soundVolume", "desc": "soundVolume(integer Index, integer Volume) (default Volume is 1)"}, "identity()": {"args": "", "return": "m", "name": "identity", "desc": ""}, "signalName()": {"args": "", "return": "s", "name": "signalName", "desc": ""}, "rangerHitWater(n)": {"args": "n", "return": "", "name": "rangerHitWater", "desc": "Default is 0, if any other value is given it will hit water"}, "toString(nn)": {"args": "nn", "return": "s", "name": "toString", "desc": "Formats a number as a string, using argument 2 as the base. i.e. using 16 for base would convert the number to hex."}, "isOnGround(e:)": {"args": "e:", "return": "n", "name": "isOnGround", "desc": ""}, "isLan()": {"args": "", "return": "n", "name": "isLan", "desc": ""}, "shiftString(r:)": {"args": "r:", "return": "s", "name": "shiftString", "desc": ""}, "pos(b:)": {"args": "b:", "return": "v", "name": "pos", "desc": ""}, "length(v:)": {"args": "v:", "return": "n", "name": "length", "desc": ""}, "setMatrix(r:nm)": {"args": "r:nm", "return": "m", "name": "setMatrix", "desc": ""}, "dsSend(ssnm)": {"args": "ssnm", "return": "n", "name": "dsSend", "desc": ""}, "gDeleteVec(n)": {"args": "n", "return": "v", "name": "gDeleteVec", "desc": ""}, "sum(r:)": {"args": "r:", "return": "n", "name": "sum", "desc": ""}, "changed(e)": {"args": "e", "return": "n", "name": "changed", "desc": ""}, "inverseA(xm4)": {"args": "xm4", "return": "xm4", "name": "inverseA", "desc": ""}, "sech(n)": {"args": "n", "return": "n", "name": "sech", "desc": "Returns the hyperbolic secant of N "}, "findUpdateRate()": {"args": "", "return": "n", "name": "findUpdateRate", "desc": ""}, "fileList()": {"args": "", "return": "r", "name": "fileList", "desc": ""}, "maxIndex(r:)": {"args": "r:", "return": "n", "name": "maxIndex", "desc": ""}, "matrix4(t:s)": {"args": "t:s", "return": "xm4", "name": "matrix4", "desc": ""}, "toAngle(v:)": {"args": "v:", "return": "a", "name": "toAngle", "desc": ""}, "tanr(n)": {"args": "n", "return": "n", "name": "tanr", "desc": "Returns the tangent of N radians "}, "egpGetPos(xwl:nn)": {"args": "xwl:nn", "return": "xv2", "name": "egpGetPos", "desc": ""}, "findIncludeEntity(e)": {"args": "e", "return": "", "name": "findIncludeEntity", "desc": "Include ''E'' in future finds, and remove others not in the whitelist"}, "lastSaid()": {"args": "", "return": "s", "name": "lastSaid", "desc": ""}, "removeVector4(xgt:s)": {"args": "xgt:s", "return": "xv4", "name": "removeVector4", "desc": ""}, "egpTriangle(xwl:nnnnnnn)": {"args": "xwl:nnnnnnn", "return": "", "name": "egpTriangle", "desc": ""}, "isAdmin(e:)": {"args": "e:", "return": "n", "name": "isAdmin", "desc": ""}, "getColor4(e:)": {"args": "e:", "return": "xv4", "name": "getColor4", "desc": ""}, "clip1(e:)": {"args": "e:", "return": "n", "name": "clip1", "desc": ""}, "angle(r:n)": {"args": "r:n", "return": "a", "name": "angle", "desc": ""}, "egpGetText(xwl:nn)": {"args": "xwl:nn", "return": "s", "name": "egpGetText", "desc": ""}, "egpTriangle(xwl:nxv2xv2xv2xv4)": {"args": "xwl:nxv2xv2xv2xv4", "return": "", "name": "egpTriangle", "desc": ""}, "conj(c)": {"args": "c", "return": "c", "name": "conj", "desc": "Returns the conjugate of ''C''"}, "gSetEnt(se)": {"args": "se", "return": "", "name": "gSetEnt", "desc": ""}, "findClipFromName(s)": {"args": "s", "return": "n", "name": "findClipFromName", "desc": "Filters the list of entities by removing all entities that do have this name"}, "egpPoly(xwl:nr)": {"args": "xwl:nr", "return": "", "name": "egpPoly", "desc": ""}, "dsGetWirelink()": {"args": "", "return": "xwl", "name": "dsGetWirelink", "desc": ""}, "clone(t:)": {"args": "t:", "return": "t", "name": "clone", "desc": ""}, "log(cc)": {"args": "cc", "return": "c", "name": "log", "desc": ""}, "egpGetPos(e:nn)": {"args": "e:nn", "return": "xv2", "name": "egpGetPos", "desc": ""}, "swapElements(xm4:nnnn)": {"args": "xm4:nnnn", "return": "xm4", "name": "swapElements", "desc": ""}, "fileListLoaded()": {"args": "", "return": "n", "name": "fileListLoaded", "desc": ""}, "conj(q)": {"args": "q", "return": "q", "name": "conj", "desc": "Returns the conjugate of ''Q''"}, "setVector(t:sv)": {"args": "t:sv", "return": "v", "name": "setVector", "desc": ""}, "toByte(s)": {"args": "s", "return": "n", "name": "toByte", "desc": "Returns the ASCII code of the 1st character in the string"}, "egpTextLayout(xwl:nsxv2xv2xv4)": {"args": "xwl:nsxv2xv2xv4", "return": "", "name": "egpTextLayout", "desc": ""}, "setVector(xwl:sv)": {"args": "xwl:sv", "return": "v", "name": "setVector", "desc": "Deprecated. Use XWL[S,vector]=X instead."}, "entity(t:s)": {"args": "t:s", "return": "e", "name": "entity", "desc": ""}, "massCenter(b:)": {"args": "b:", "return": "v", "name": "massCenter", "desc": ""}, "asin(n)": {"args": "n", "return": "n", "name": "asin", "desc": "Returns the inverse sine of the argument, in degrees"}, "pushBone(r:b)": {"args": "r:b", "return": "", "name": "pushBone", "desc": ""}, "select(nxv4...)": {"args": "nxv4...", "return": "xv4", "name": "select", "desc": ""}, "yaw(a:)": {"args": "a:", "return": "n", "name": "yaw", "desc": ""}, "findDisallowPlayerProps(e)": {"args": "e", "return": "", "name": "findDisallowPlayerProps", "desc": "Remove entities owned by this player from the whitelist"}, "setString(r:ns)": {"args": "r:ns", "return": "s", "name": "setString", "desc": ""}, "insertNumber(r:nn)": {"args": "r:nn", "return": "", "name": "insertNumber", "desc": ""}, "i(q:)": {"args": "q:", "return": "n", "name": "i", "desc": ""}, "changed(a)": {"args": "a", "return": "n", "name": "changed", "desc": ""}, "egpPos2(xwl:nxv2)": {"args": "xwl:nxv2", "return": "", "name": "egpPos2", "desc": ""}, "swapColumns(xm2:)": {"args": "xm2:", "return": "xm2", "name": "swapColumns", "desc": ""}, "isAlive(e:)": {"args": "e:", "return": "n", "name": "isAlive", "desc": ""}, "egpPolyColor(e:nvr)": {"args": "e:nvr", "return": "", "name": "egpPolyColor", "desc": ""}, "egpColor(e:nv)": {"args": "e:nv", "return": "", "name": "egpColor", "desc": ""}, "setAngle(t:sa)": {"args": "t:sa", "return": "a", "name": "setAngle", "desc": ""}, "isWeldedTo(e:n)": {"args": "e:n", "return": "e", "name": "isWeldedTo", "desc": "Returns the ''N''th entity ''E'' was welded to"}, "egpText(xwl:nsxv2xv4)": {"args": "xwl:nsxv2xv4", "return": "", "name": "egpText", "desc": ""}, "popVector2(r:)": {"args": "r:", "return": "xv2", "name": "popVector2", "desc": ""}, "minVec(vv)": {"args": "vv", "return": "v", "name": "minVec", "desc": "Returns a vector combining the lowest value components of V1 and V2"}, "acos(n)": {"args": "n", "return": "n", "name": "acos", "desc": "Returns the inverse cosine of the argument, in degrees"}, "egpBox(e:nxv2xv2xv4)": {"args": "e:nxv2xv2xv4", "return": "", "name": "egpBox", "desc": ""}, "gRemoveAllTables(s)": {"args": "s", "return": "", "name": "gRemoveAllTables", "desc": ""}, "vec4(nnnn)": {"args": "nnnn", "return": "xv4", "name": "vec4", "desc": "Makes a 4D vector"}, "length2(v:)": {"args": "v:", "return": "n", "name": "length2", "desc": ""}, "getMaterial(e:)": {"args": "e:", "return": "s", "name": "getMaterial", "desc": ""}, "egpTextLayout(e:nsnnnnv)": {"args": "e:nsnnnnv", "return": "", "name": "egpTextLayout", "desc": ""}, "asinr(n)": {"args": "n", "return": "n", "name": "asinr", "desc": "Returns the inverse sine of the argument, in radians"}, "egpCanDraw(e:)": {"args": "e:", "return": "n", "name": "egpCanDraw", "desc": ""}, "holoAlpha(nn)": {"args": "nn", "return": "", "name": "holoAlpha", "desc": "Index, Alpha<br>Changes the alpha of a hologram"}, "holoParent(ne)": {"args": "ne", "return": "", "name": "holoParent", "desc": "Index, Entity<br>Attaches a hologram to an entity"}, "gGetStr(n)": {"args": "n", "return": "s", "name": "gGetStr", "desc": ""}, "dehomogenized(xv4:)": {"args": "xv4:", "return": "v", "name": "dehomogenized", "desc": ""}, "egpCircle(xwl:nxv2xv2v)": {"args": "xwl:nxv2xv2v", "return": "", "name": "egpCircle", "desc": ""}, "egpLine(xwl:nnnnn)": {"args": "xwl:nnnnn", "return": "", "name": "egpLine", "desc": ""}, "outputs(xwl:)": {"args": "xwl:", "return": "r", "name": "outputs", "desc": ""}, "runOnFile(n)": {"args": "n", "return": "", "name": "runOnFile", "desc": "Makes the expression execute when the file has finished uploading to the server."}, "holoModel(ns)": {"args": "ns", "return": "", "name": "holoModel", "desc": "Index, Model<br>Changes the model of a hologram (see the model list below)"}, "sqrt(c)": {"args": "c", "return": "c", "name": "sqrt", "desc": "Calculates the square root of ''C''"}, "printDriver(e:s)": {"args": "e:s", "return": "n", "name": "printDriver", "desc": "Posts a string to the chat of ''E'''s driver. Returns 1 if the text was printed, 0 if not."}, "fileClk()": {"args": "", "return": "n", "name": "fileClk", "desc": ""}, "minVec(xv4xv4)": {"args": "xv4xv4", "return": "xv4", "name": "minVec", "desc": ""}, "holoEntity(n)": {"args": "n", "return": "e", "name": "holoEntity", "desc": "Returns the entity corresponding to the hologram given by the specified index."}, "wirelink(xwl:s)": {"args": "xwl:s", "return": "xwl", "name": "wirelink", "desc": ""}, "removeMatrix(xgt:s)": {"args": "xgt:s", "return": "m", "name": "removeMatrix", "desc": ""}, "rangerOffsetHull(nvvv)": {"args": "nvvv", "return": "xrd", "name": "rangerOffsetHull", "desc": "Inputs: Distance, StartPos, Direction, Hull BoxSize"}, "lookupAttachment(e:s)": {"args": "e:s", "return": "n", "name": "lookupAttachment", "desc": ""}, "dot(xv2:xv2)": {"args": "xv2:xv2", "return": "n", "name": "dot", "desc": ""}, "print(...)": {"args": "...", "return": "", "name": "print", "desc": "Prints all arguments to the chat area, seperated by a tab. Automatically does toString for you (Can print arrays but not tables). Works just like lua's [[G.print|print)]]."}, "min(nnnn)": {"args": "nnnn", "return": "n", "name": "min", "desc": "Returns the lowest value Argument"}, "gRemoveAllVector2s(s)": {"args": "s", "return": "", "name": "gRemoveAllVector2s", "desc": ""}, "rangerHull(nnnvv)": {"args": "nnnvv", "return": "xrd", "name": "rangerHull", "desc": "Inputs: Distance, X Skew, Y Skew, Hull MinSize, Hull MaxSize"}, "dsSendDirect(sra)": {"args": "sra", "return": "n", "name": "dsSendDirect", "desc": ""}, "writeString(xwl:snnnnn)": {"args": "xwl:snnnnn", "return": "", "name": "writeString", "desc": "As above, with an extra argument for flashing text. 0 or 1 is recommended."}, "pos(e:)": {"args": "e:", "return": "v", "name": "pos", "desc": ""}, "egpBox(e:nxv2xv2)": {"args": "e:nxv2xv2", "return": "", "name": "egpBox", "desc": ""}, "setVector4(xwl:sxv4)": {"args": "xwl:sxv4", "return": "xv4", "name": "setVector4", "desc": ""}, "maxquota()": {"args": "", "return": "n", "name": "maxquota", "desc": ""}, "ranger(t:s)": {"args": "t:s", "return": "xrd", "name": "ranger", "desc": ""}, "distance2(xv2:xv2)": {"args": "xv2:xv2", "return": "n", "name": "distance2", "desc": ""}, "holoClipsAvailable()": {"args": "", "return": "n", "name": "holoClipsAvailable", "desc": ""}, "egpTriangle(e:nxv2xv2xv2xv4)": {"args": "e:nxv2xv2xv2xv4", "return": "", "name": "egpTriangle", "desc": ""}, "egpBox(e:nnnnnv)": {"args": "e:nnnnnv", "return": "", "name": "egpBox", "desc": ""}, "findPlayerByName(s)": {"args": "s", "return": "e", "name": "findPlayerByName", "desc": "Returns the player with the given name, this is an exception to the rule"}, "shiftVector4(r:)": {"args": "r:", "return": "xv4", "name": "shiftVector4", "desc": ""}, "gDeleteAllAng()": {"args": "", "return": "", "name": "gDeleteAllAng", "desc": ""}, "mass(b:)": {"args": "b:", "return": "n", "name": "mass", "desc": ""}, "bearing(e:v)": {"args": "e:v", "return": "n", "name": "bearing", "desc": "Gets the bearing from the entity to the vector"}, "cosr(n)": {"args": "n", "return": "n", "name": "cosr", "desc": "Returns the cosine of N radians "}, "abs(c)": {"args": "c", "return": "n", "name": "abs", "desc": "Returns the absolute value of ''C''"}, "shiftMatrix4(r:)": {"args": "r:", "return": "xm4", "name": "shiftMatrix4", "desc": ""}, "ceil(xv4n)": {"args": "xv4n", "return": "xv4", "name": "ceil", "desc": ""}, "ceil(an)": {"args": "an", "return": "a", "name": "ceil", "desc": "Rounds PYR up to argument 2's decimal precision"}, "column(xm4:n)": {"args": "xm4:n", "return": "xv4", "name": "column", "desc": ""}, "quat(n)": {"args": "n", "return": "q", "name": "quat", "desc": "Creates a quaternion with real part equal to ''N''"}, "changed(xv2)": {"args": "xv2", "return": "n", "name": "changed", "desc": ""}, "setVector2(r:nxv2)": {"args": "r:nxv2", "return": "xv2", "name": "setVector2", "desc": ""}, "atanr(nn)": {"args": "nn", "return": "n", "name": "atanr", "desc": "Returns the inverse tangent of the arguments (arg1 / arg2), in radians. This function accounts for positive/negative arguments, and arguments at or close to 0"}, "lastSaidTeam(e:)": {"args": "e:", "return": "n", "name": "lastSaidTeam", "desc": ""}, "findClipToModel(s)": {"args": "s", "return": "n", "name": "findClipToModel", "desc": "Filters the list of entities by removing all entities that do NOT have this model"}, "dsSend(ssxm4)": {"args": "ssxm4", "return": "n", "name": "dsSend", "desc": ""}, "npcGetTarget(e:)": {"args": "e:", "return": "e", "name": "npcGetTarget", "desc": ""}, "egpGetElement(xwl:nn)": {"args": "xwl:nn", "return": "t", "name": "egpGetElement", "desc": ""}, "soundPitch(nn)": {"args": "nn", "return": "", "name": "soundPitch", "desc": "soundPitch(integer Index, integer Pitch) (default Pitch is 100)"}, "egpPolyColor(xwl:nxv4r)": {"args": "xwl:nxv4r", "return": "", "name": "egpPolyColor", "desc": ""}, "swapColumns(xm4:nn)": {"args": "xm4:nn", "return": "xm4", "name": "swapColumns", "desc": ""}, "applyForce(e:v)": {"args": "e:v", "return": "", "name": "applyForce", "desc": "Applies force to the entity according to the given vector's direction and magnitude"}, "soundVolume(sn)": {"args": "sn", "return": "", "name": "soundVolume", "desc": "Same as above but takes a string index instead of an integer index"}, "findDisallowEntity(e)": {"args": "e", "return": "", "name": "findDisallowEntity", "desc": "Remove ''E'' from the whitelist"}, "bones(e:)": {"args": "e:", "return": "r", "name": "bones", "desc": ""}, "shiftEntity(r:)": {"args": "r:", "return": "e", "name": "shiftEntity", "desc": ""}, "holoReset(nsvvs)": {"args": "nsvvs", "return": "", "name": "holoReset", "desc": ""}, "gSetAng(na)": {"args": "na", "return": "", "name": "gSetAng", "desc": ""}, "holoColor(nv)": {"args": "nv", "return": "", "name": "holoColor", "desc": "Index, Color<br>Changes the color of a hologram"}, "gRemoveAllArrays()": {"args": "", "return": "", "name": "gRemoveAllArrays", "desc": ""}, "toWorld(e:a)": {"args": "e:a", "return": "a", "name": "toWorld", "desc": "Transforms from an angle local to ''E'' to a world angle."}, "egpBoxOutline(xwl:nxv2xv2)": {"args": "xwl:nxv2xv2", "return": "", "name": "egpBoxOutline", "desc": ""}, "vector2(r:n)": {"args": "r:n", "return": "xv2", "name": "vector2", "desc": ""}, "egpClear(e:r)": {"args": "e:r", "return": "", "name": "egpClear", "desc": ""}, "egpLine(xwl:nxv2xv2xv4)": {"args": "xwl:nxv2xv2xv4", "return": "", "name": "egpLine", "desc": ""}, "diagonal(xm2)": {"args": "xm2", "return": "xv2", "name": "diagonal", "desc": ""}, "abs(q)": {"args": "q", "return": "n", "name": "abs", "desc": "Returns absolute value of ''Q''"}, "findDisallowEntities(r)": {"args": "r", "return": "", "name": "findDisallowEntities", "desc": "Remove all entities from ''R'' from the whitelist"}, "array(...)": {"args": "...", "return": "r", "name": "array", "desc": "Constructs an array with the given values as elements. If you specify types that are not supported by the array data type, the behaviour is undefined."}, "holoPos(nv)": {"args": "nv", "return": "", "name": "holoPos", "desc": "Index, Position<br>Sets the position of a hologram"}, "egpTextAlign(xwl:nnn)": {"args": "xwl:nnn", "return": "", "name": "egpTextAlign", "desc": ""}, "setMatrix2(t:sxm2)": {"args": "t:sxm2", "return": "xm2", "name": "setMatrix2", "desc": ""}, "applyAngForce(b:a)": {"args": "b:a", "return": "", "name": "applyAngForce", "desc": "Applies torque to ''B'' according to ''A''"}, "egpGetSize(e:nn)": {"args": "e:nn", "return": "xv2", "name": "egpGetSize", "desc": ""}, "readString(xwl:n)": {"args": "xwl:n", "return": "s", "name": "readString", "desc": "Reads a null-terminated string from the given address. Returns an empty string on failure."}, "rangerOffsetHull(vvvv)": {"args": "vvvv", "return": "xrd", "name": "rangerOffsetHull", "desc": "Inputs: StartPos, EndPos, Hull MinSize, Hull MaxSize"}, "matchFirst(s:sn)": {"args": "s:sn", "return": "s", "name": "matchFirst", "desc": ""}, "matrix4(m)": {"args": "m", "return": "xm4", "name": "matrix4", "desc": "Converts a 3x3 matrix into a 4x4 matrix - all (i,4) and (4,j) are filled with 0's"}, "unshiftMatrix(r:m)": {"args": "r:m", "return": "", "name": "unshiftMatrix", "desc": ""}, "selfDestructAll()": {"args": "", "return": "", "name": "selfDestructAll", "desc": ""}, "dsSendDirect(srxrd)": {"args": "srxrd", "return": "n", "name": "dsSendDirect", "desc": ""}, "trace(xm2)": {"args": "xm2", "return": "n", "name": "trace", "desc": ""}, "setZ(v:n)": {"args": "v:n", "return": "v", "name": "setZ", "desc": "Returns a copy of the vector with Z replaced (use as Vec = Vec:setZ(...))"}, "quaternion(t:s)": {"args": "t:s", "return": "q", "name": "quaternion", "desc": ""}, "writeString(xwl:snnvn)": {"args": "xwl:snnvn", "return": "", "name": "writeString", "desc": ""}, "changed(b)": {"args": "b", "return": "n", "name": "changed", "desc": ""}, "slerp(qqn)": {"args": "qqn", "return": "q", "name": "slerp", "desc": ""}, "entity(xrd:)": {"args": "xrd:", "return": "e", "name": "entity", "desc": ""}, "gGetGroup()": {"args": "", "return": "s", "name": "gGetGroup", "desc": ""}, "egpPosX1(xwl:nn)": {"args": "xwl:nn", "return": "", "name": "egpPosX1", "desc": ""}, "egpColor(xwl:nv)": {"args": "xwl:nv", "return": "", "name": "egpColor", "desc": ""}, "dsSend(ssnb)": {"args": "ssnb", "return": "n", "name": "dsSend", "desc": ""}, "gRemoveAllQuaternions(s)": {"args": "s", "return": "", "name": "gRemoveAllQuaternions", "desc": ""}, "popMatrix4(r:)": {"args": "r:", "return": "xm4", "name": "popMatrix4", "desc": ""}, "setMatrix2(r:nxm2)": {"args": "r:nxm2", "return": "xm2", "name": "setMatrix2", "desc": ""}, "removeMatrix2(r:n)": {"args": "r:n", "return": "xm2", "name": "removeMatrix2", "desc": ""}, "qRotation(vn)": {"args": "vn", "return": "q", "name": "qRotation", "desc": "Returns quaternion for rotation about axis ''V'' by angle ''N''"}, "isInWorld(v:)": {"args": "v:", "return": "n", "name": "isInWorld", "desc": ""}, "setElement(m:nnn)": {"args": "m:nnn", "return": "m", "name": "setElement", "desc": "Sets an element's value. The first two arguments specify the indices (i,j), the third argument is the value to set it to"}, "shiftL(a)": {"args": "a", "return": "a", "name": "shiftL", "desc": "Shifts the angle's components left:  shiftL( p,y,r ) = ( y,r,p )"}, "findRE(s:s)": {"args": "s:s", "return": "n", "name": "findRE", "desc": "Returns the 1st occurrence of the string S using REGEX functions, returns 0 if not found"}, "findIncludePlayer(s)": {"args": "s", "return": "", "name": "findIncludePlayer", "desc": "Include this player in future finds, and remove other entities not in the entity whitelist"}, "unshiftAngle(r:a)": {"args": "r:a", "return": "", "name": "unshiftAngle", "desc": ""}, "heading(b:v)": {"args": "b:v", "return": "a", "name": "heading", "desc": ""}, "invert(r)": {"args": "r", "return": "t", "name": "invert", "desc": "Returns a lookup table for ''R''. Usage: Index = T:number(toString(Value))<br />"}, "randint(nn)": {"args": "nn", "return": "n", "name": "randint", "desc": "Returns a random integer in the specified interval [''a <= x <= b '']"}, "inputClk()": {"args": "", "return": "n", "name": "inputClk", "desc": ""}, "egpPosY(e:nn)": {"args": "e:nn", "return": "", "name": "egpPosY", "desc": ""}, "setAlpha(e:n)": {"args": "e:n", "return": "", "name": "setAlpha", "desc": "Changes the alpha of an entity"}, "gDeleteAllVec()": {"args": "", "return": "", "name": "gDeleteAllVec", "desc": ""}, "holoParent(nb)": {"args": "nb", "return": "", "name": "holoParent", "desc": ""}, "gRemoveAllVectors(s)": {"args": "s", "return": "", "name": "gRemoveAllVectors", "desc": ""}, "csc(c)": {"args": "c", "return": "c", "name": "csc", "desc": "Calculates the cosecant of ''C''"}, "y(xv4:)": {"args": "xv4:", "return": "n", "name": "y", "desc": ""}, "egpTextLayout(e:nsxv2xv2)": {"args": "e:nsxv2xv2", "return": "", "name": "egpTextLayout", "desc": ""}, "dsGetQuaternion()": {"args": "", "return": "q", "name": "dsGetQuaternion", "desc": ""}, "egpRemove(xwl:n)": {"args": "xwl:n", "return": "", "name": "egpRemove", "desc": ""}, "toString(n)": {"args": "n", "return": "s", "name": "toString", "desc": "Formats a number as a string. (Numbers may be concatenated into a string without using this function)"}, "elevation(e:v)": {"args": "e:v", "return": "n", "name": "elevation", "desc": "Gets the elevation from the entity to the vector"}, "transpose(xm4)": {"args": "xm4", "return": "xm4", "name": "transpose", "desc": ""}, "rangerOffsetHull(vvv)": {"args": "vvv", "return": "xrd", "name": "rangerOffsetHull", "desc": "Inputs: StartPos, EndPos, Hull BoxSize"}, "min(vv)": {"args": "vv", "return": "v", "name": "min", "desc": "Returns the vector with the smallest length"}, "cotr(n)": {"args": "n", "return": "n", "name": "cotr", "desc": "Returns the cotangent of N radians"}, "floor(n)": {"args": "n", "return": "n", "name": "floor", "desc": "Rounds the Argument down to the nearest Integer"}, "setArray(xwl:sr)": {"args": "xwl:sr", "return": "r", "name": "setArray", "desc": ""}, "findAllowPlayerProps(e)": {"args": "e", "return": "", "name": "findAllowPlayerProps", "desc": "Remove entities owned by this player from the blacklist"}, "dsLeaveGroup(s)": {"args": "s", "return": "", "name": "dsLeaveGroup", "desc": "Leaves the group ''S''. The E2 will no longer receive signals sent in this group."}, "select(nt...)": {"args": "nt...", "return": "t", "name": "select", "desc": ""}, "egpLine(xwl:nnnnnv)": {"args": "xwl:nnnnnv", "return": "", "name": "egpLine", "desc": ""}, "npcFace(e:v)": {"args": "e:v", "return": "", "name": "npcFace", "desc": "This will rotate the NPC to face position V. This is purely aesthetic and can't be used to aim their weapon."}, "acosr(n)": {"args": "n", "return": "n", "name": "acosr", "desc": "Returns the inverse cosine of the argument, in radians"}, "egpPos1(xwl:nxv2)": {"args": "xwl:nxv2", "return": "", "name": "egpPos1", "desc": ""}, "up(a:)": {"args": "a:", "return": "v", "name": "up", "desc": ""}, "timeConnected(e:)": {"args": "e:", "return": "n", "name": "timeConnected", "desc": ""}, "popMatrix(r:)": {"args": "r:", "return": "m", "name": "popMatrix", "desc": ""}, "rotate(v:nnn)": {"args": "v:nnn", "return": "v", "name": "rotate", "desc": "Gets the rotated vector"}, "bNot(nn)": {"args": "nn", "return": "n", "name": "bNot", "desc": ""}, "pushVector2(r:xv2)": {"args": "r:xv2", "return": "", "name": "pushVector2", "desc": ""}, "removeWirelink(xgt:s)": {"args": "xgt:s", "return": "xwl", "name": "removeWirelink", "desc": ""}, "signalGetGroup()": {"args": "", "return": "s", "name": "signalGetGroup", "desc": ""}, "rotateAroundAxis(a:vn)": {"args": "a:vn", "return": "a", "name": "rotateAroundAxis", "desc": "Returns the angle A rotated around vector V by N degrees."}, "setString(t:ss)": {"args": "t:ss", "return": "s", "name": "setString", "desc": ""}, "tanh(c)": {"args": "c", "return": "c", "name": "tanh", "desc": "Calculates the hyperbolic tangent of ''C''"}, "setColor(nnn)": {"args": "nnn", "return": "", "name": "setColor", "desc": ""}, "findAllowModel(s)": {"args": "s", "return": "", "name": "findAllowModel", "desc": "Remove entities with this model (or partial model name) from the blacklist"}, "length2(xv4:)": {"args": "xv4:", "return": "n", "name": "length2", "desc": ""}, "distance2(v:v)": {"args": "v:v", "return": "n", "name": "distance2", "desc": "Gets the squared distance between vectors"}, "qk(n)": {"args": "n", "return": "q", "name": "qk", "desc": "Returns ''N''*k"}, "length2(xv2:)": {"args": "xv2:", "return": "n", "name": "length2", "desc": ""}, "gRemoveAllBones(s)": {"args": "s", "return": "", "name": "gRemoveAllBones", "desc": ""}, "holoSkin(nn)": {"args": "nn", "return": "", "name": "holoSkin", "desc": "Index, Skin<br>Changes the skin of a hologram"}, "holoClipEnabled(nn)": {"args": "nn", "return": "", "name": "holoClipEnabled", "desc": "Index, Enabled.<br> Enables / disables clipping for a hologram"}, "printTable(t)": {"args": "t", "return": "", "name": "printTable", "desc": "Prints a table like the lua function [[G.PrintTable|PrintTable]] does, except to the chat area."}, "egpPosY(xwl:nn)": {"args": "xwl:nn", "return": "", "name": "egpPosY", "desc": ""}, "maxVec(xv2xv2)": {"args": "xv2xv2", "return": "xv2", "name": "maxVec", "desc": ""}, "egpGetPos1(xwl:nn)": {"args": "xwl:nn", "return": "xv2", "name": "egpGetPos1", "desc": ""}, "egpTextLayout(xwl:nsnnnn)": {"args": "xwl:nsnnnn", "return": "", "name": "egpTextLayout", "desc": ""}, "right(s:n)": {"args": "s:n", "return": "s", "name": "right", "desc": "Returns N amount of characters starting from the rightmost character"}, "quat(nnnn)": {"args": "nnnn", "return": "q", "name": "quat", "desc": ""}, "changed()": {"args": "", "return": "n", "name": "changed", "desc": ""}, "holoDelete(n)": {"args": "n", "return": "", "name": "holoDelete", "desc": "Index<br>Removes the hologram with the specified index"}, "vec4(v)": {"args": "v", "return": "xv4", "name": "vec4", "desc": "Converts a 3D vector into a 4D vector (the w component is set to 0)"}, "dsSendDirect(srv)": {"args": "srv", "return": "n", "name": "dsSendDirect", "desc": ""}, "dsSendDirect(srxm2)": {"args": "srxm2", "return": "n", "name": "dsSendDirect", "desc": ""}, "setY(xv2:n)": {"args": "xv2:n", "return": "xv2", "name": "setY", "desc": ""}, "egpCircle(xwl:nnnnnv)": {"args": "xwl:nnnnnv", "return": "", "name": "egpCircle", "desc": ""}, "gSetAng(sa)": {"args": "sa", "return": "", "name": "gSetAng", "desc": ""}, "qi()": {"args": "", "return": "q", "name": "qi", "desc": ""}, "clamp(aaa)": {"args": "aaa", "return": "a", "name": "clamp", "desc": "Clamps angle 1's PYR between the PYR of angle 2(min) and angle 3(max)"}, "egpBox(e:nxv2xv2v)": {"args": "e:nxv2xv2v", "return": "", "name": "egpBox", "desc": ""}, "gRemoveAllComplexs(s)": {"args": "s", "return": "", "name": "gRemoveAllComplexs", "desc": ""}, "row(xm4:n)": {"args": "xm4:n", "return": "xv4", "name": "row", "desc": ""}, "applyForce(b:v)": {"args": "b:v", "return": "", "name": "applyForce", "desc": "Applies force to ''B'' according to ''V'''s direction and magnitude"}, "egpPos(e:nnn)": {"args": "e:nnn", "return": "", "name": "egpPos", "desc": ""}, "egpTriangle(e:nnnnnnnv)": {"args": "e:nnnnnnnv", "return": "", "name": "egpTriangle", "desc": ""}, "egpBoxOutline(xwl:nxv2xv2xv4)": {"args": "xwl:nxv2xv2xv4", "return": "", "name": "egpBoxOutline", "desc": ""}, "matrix(vvv)": {"args": "vvv", "return": "m", "name": "matrix", "desc": "Creates a matrix with vectors by columns"}, "number(r:n)": {"args": "r:n", "return": "n", "name": "number", "desc": ""}, "setMatrix4(r:nxm4)": {"args": "r:nxm4", "return": "xm4", "name": "setMatrix4", "desc": ""}, "inputs(xwl:)": {"args": "xwl:", "return": "r", "name": "inputs", "desc": ""}, "findExcludeClass(s)": {"args": "s", "return": "", "name": "findExcludeClass", "desc": "Exclude entities with this class (or partial class name) from future finds"}, "egpBoxOutline(e:nxv2xv2v)": {"args": "e:nxv2xv2v", "return": "", "name": "egpBoxOutline", "desc": ""}, "entity(r:n)": {"args": "r:n", "return": "e", "name": "entity", "desc": ""}, "up(q:)": {"args": "q:", "return": "v", "name": "up", "desc": ""}, "vec(xv2)": {"args": "xv2", "return": "v", "name": "vec", "desc": ""}, "matrix(r:n)": {"args": "r:n", "return": "m", "name": "matrix", "desc": ""}, "dsSend(ssxv2)": {"args": "ssxv2", "return": "n", "name": "dsSend", "desc": ""}, "max(nn)": {"args": "nn", "return": "n", "name": "max", "desc": "Returns the highest value Argument"}, "ceil(n)": {"args": "n", "return": "n", "name": "ceil", "desc": "Rounds the Argument up to the nearest Integer"}, "egpColor(xwl:nxv4)": {"args": "xwl:nxv4", "return": "", "name": "egpColor", "desc": ""}, "owner(e:)": {"args": "e:", "return": "e", "name": "owner", "desc": ""}, "dsClk()": {"args": "", "return": "n", "name": "dsClk", "desc": ""}, "setDiagonal(m:v)": {"args": "m:v", "return": "m", "name": "setDiagonal", "desc": "Sets the elements of the leading diagonal from the components of a vector"}, "keys(t:)": {"args": "t:", "return": "r", "name": "keys", "desc": ""}, "changed(q)": {"args": "q", "return": "n", "name": "changed", "desc": ""}, "dsJoinGroup(s)": {"args": "s", "return": "", "name": "dsJoinGroup", "desc": "Joins the group ''S''. The E2 will now receive signals sent in this group, as well as any other groups the E2 is in."}, "teamName(n)": {"args": "n", "return": "s", "name": "teamName", "desc": ""}, "setNumber(xwl:sn)": {"args": "xwl:sn", "return": "n", "name": "setNumber", "desc": "Deprecated. Use XWL[S,number]=X instead."}, "removeBone(r:n)": {"args": "r:n", "return": "b", "name": "removeBone", "desc": ""}, "x(xm4:)": {"args": "xm4:", "return": "v", "name": "x", "desc": ""}, "findDisallowClass(s)": {"args": "s", "return": "", "name": "findDisallowClass", "desc": "Remove entities with this class (or partial class name) from the whitelist"}, "holoCreate(nv)": {"args": "nv", "return": "e", "name": "holoCreate", "desc": "Index, Position<br>Creates a new hologram entity"}, "trim(s:)": {"args": "s:", "return": "s", "name": "trim", "desc": ""}, "changed(c)": {"args": "c", "return": "n", "name": "changed", "desc": ""}, "gravity()": {"args": "", "return": "n", "name": "gravity", "desc": ""}, "interval(n)": {"args": "n", "return": "", "name": "interval", "desc": "Causes the expression to execute every N milliseconds (minimum delay is 10 milliseconds)"}, "toString(c)": {"args": "c", "return": "s", "name": "toString", "desc": "Formats ''C'' as a string."}, "teamFrags(n:)": {"args": "n:", "return": "n", "name": "teamFrags", "desc": ""}, "index(b:)": {"args": "b:", "return": "n", "name": "index", "desc": ""}, "last()": {"args": "", "return": "n", "name": "last", "desc": ""}, "angle(t:s)": {"args": "t:s", "return": "a", "name": "angle", "desc": ""}, "holoCreate(nvv)": {"args": "nvv", "return": "e", "name": "holoCreate", "desc": "Index, Position, Scale<br>Creates a new hologram entity"}, "floor(xv4)": {"args": "xv4", "return": "xv4", "name": "floor", "desc": ""}, "findAllowEntities(r)": {"args": "r", "return": "", "name": "findAllowEntities", "desc": "Remove all entities from ''R'' from the blacklist"}, "setBone(t:sb)": {"args": "t:sb", "return": "b", "name": "setBone", "desc": ""}, "gRemoveAllVectors()": {"args": "", "return": "", "name": "gRemoveAllVectors", "desc": ""}, "egpTextLayout(e:nsxv2xv2xv4)": {"args": "e:nsxv2xv2xv4", "return": "", "name": "egpTextLayout", "desc": ""}, "fileCanLoad()": {"args": "", "return": "n", "name": "fileCanLoad", "desc": ""}, "sin(c)": {"args": "c", "return": "c", "name": "sin", "desc": "Calculates the sine of ''C''"}, "npcAttack(e:)": {"args": "e:", "return": "", "name": "npcAttack", "desc": ""}, "pi()": {"args": "", "return": "n", "name": "pi", "desc": ""}, "popVector(r:)": {"args": "r:", "return": "v", "name": "popVector", "desc": ""}, "setEntity(r:ne)": {"args": "r:ne", "return": "e", "name": "setEntity", "desc": ""}, "rotationAngle(q)": {"args": "q", "return": "n", "name": "rotationAngle", "desc": "Returns the angle of rotation in degrees (by coder0xff)"}, "mod(aa)": {"args": "aa", "return": "a", "name": "mod", "desc": "Returns the remainder after the components of angle 1 have been divided by the components of angle 2"}, "signalSender()": {"args": "", "return": "e", "name": "signalSender", "desc": ""}, "setW(xv4:n)": {"args": "xv4:n", "return": "xv4", "name": "setW", "desc": ""}, "setDiagonal(xm4:xv4)": {"args": "xm4:xv4", "return": "xm4", "name": "setDiagonal", "desc": ""}, "setVector2(xwl:sxv2)": {"args": "xwl:sxv2", "return": "xv2", "name": "setVector2", "desc": ""}, "soundPlay(nns)": {"args": "nns", "return": "", "name": "soundPlay", "desc": "soundPlay(int Index, int Duration, string Path to File)"}, "select(nb...)": {"args": "nb...", "return": "b", "name": "select", "desc": ""}, "bearing(b:v)": {"args": "b:v", "return": "n", "name": "bearing", "desc": "Returns the bearing (yaw) from ''B'' to ''V''"}, "heading(e:v)": {"args": "e:v", "return": "a", "name": "heading", "desc": "Gets the elevation and bearing from the entity to the vector"}, "gtable(t:s)": {"args": "t:s", "return": "xgt", "name": "gtable", "desc": ""}, "findInCone(vvnn)": {"args": "vvnn", "return": "n", "name": "findInCone", "desc": "Like findInSphere but with a [[http://mathworld.wolfram.com/SphericalCone.html Spherical cone]], arguments are for position, direction, length, and degrees (works now)"}, "setRow(xm2:nnn)": {"args": "xm2:nnn", "return": "xm2", "name": "setRow", "desc": ""}, "toDeg(n)": {"args": "n", "return": "n", "name": "toDeg", "desc": "Converts Radian angles to Degree angles"}, "egpTextLayout(xwl:nsnnnnv)": {"args": "xwl:nsnnnnv", "return": "", "name": "egpTextLayout", "desc": ""}, "vector4(t:s)": {"args": "t:s", "return": "xv4", "name": "vector4", "desc": ""}, "npcSetTarget(e:e)": {"args": "e:e", "return": "", "name": "npcSetTarget", "desc": "Sets the npcs current target."}, "diagonal(m)": {"args": "m", "return": "v", "name": "diagonal", "desc": "Returns a vector comprising the elements along the leading diagonal"}, "egpSaveFrame(xwl:nn)": {"args": "xwl:nn", "return": "", "name": "egpSaveFrame", "desc": ""}, "vec4(xv2nn)": {"args": "xv2nn", "return": "xv4", "name": "vec4", "desc": ""}, "inrange(xv4xv4xv4)": {"args": "xv4xv4xv4", "return": "n", "name": "inrange", "desc": ""}, "matrix4(av)": {"args": "av", "return": "xm4", "name": "matrix4", "desc": "Returns a 4x4 reference frame matrix as described by the angle ''A'' and the position ''V''. Multiplying by this matrix will be the same as rotating by the given angle and offsetting by the given vector."}, "holoCreate(nvvavs)": {"args": "nvvavs", "return": "e", "name": "holoCreate", "desc": ""}, "toLocal(b:v)": {"args": "b:v", "return": "v", "name": "toLocal", "desc": "Transforms ''V'' from world coordinates to local coordinates (as seen from ''B'')"}, "sech(c)": {"args": "c", "return": "c", "name": "sech", "desc": "Calculates the hyperbolic secant of ''C''"}, "ranger(n)": {"args": "n", "return": "xrd", "name": "ranger", "desc": "You input max range, it returns ranger data"}, "fromUnit(sn)": {"args": "sn", "return": "n", "name": "fromUnit", "desc": "Converts specified units to default garrysmod units"}, "vec4(xv2xv2)": {"args": "xv2xv2", "return": "xv4", "name": "vec4", "desc": ""}, "removeMatrix4(r:n)": {"args": "r:n", "return": "xm4", "name": "removeMatrix4", "desc": ""}, "egpPosY2(xwl:nn)": {"args": "xwl:nn", "return": "", "name": "egpPosY2", "desc": ""}, "gRemoveAllBones()": {"args": "", "return": "", "name": "gRemoveAllBones", "desc": ""}, "elevation(b:v)": {"args": "b:v", "return": "n", "name": "elevation", "desc": "Returns the elevation (pitch) from ''B'' to ''V''"}, "teamDeaths(n:)": {"args": "n:", "return": "n", "name": "teamDeaths", "desc": ""}, "setWirelink(t:sxwl)": {"args": "t:sxwl", "return": "xwl", "name": "setWirelink", "desc": ""}, "identity2()": {"args": "", "return": "xm2", "name": "identity2", "desc": ""}, "gDeleteEnt(s)": {"args": "s", "return": "e", "name": "gDeleteEnt", "desc": ""}, "attachmentAng(e:n)": {"args": "e:n", "return": "a", "name": "attachmentAng", "desc": ""}, "opcounter()": {"args": "", "return": "n", "name": "opcounter", "desc": ""}, "cbrt(n)": {"args": "n", "return": "n", "name": "cbrt", "desc": "Returns the Cube Root of the Argument"}, "holoScaleUnits(nv)": {"args": "nv", "return": "", "name": "holoScaleUnits", "desc": "Index, Scale<br>Scales a hologram in each direction according to Garry's Mod units, given by a vector"}, "ammoCount(e:s)": {"args": "e:s", "return": "n", "name": "ammoCount", "desc": "Returns the amount of stored ammo of type S on player E, excluding current clip"}, "inertia(b:)": {"args": "b:", "return": "v", "name": "inertia", "desc": ""}, "findExcludePlayer(e)": {"args": "e", "return": "", "name": "findExcludePlayer", "desc": "Exclude this player from future finds (put it on the entity blacklist)"}, "dsGetVector2()": {"args": "", "return": "xv2", "name": "dsGetVector2", "desc": ""}, "unshiftString(r:s)": {"args": "r:s", "return": "", "name": "unshiftString", "desc": ""}, "signalClk()": {"args": "", "return": "n", "name": "signalClk", "desc": ""}, "hint(sn)": {"args": "sn", "return": "", "name": "hint", "desc": "Displays a hint popup with message ''S'' for ''N'' seconds (''N'' being clamped between 0.7 and 7)."}, "vector(xwl:s)": {"args": "xwl:s", "return": "v", "name": "vector", "desc": "Deprecated. Use XWL[S,vector] instead."}, "egpTriangle(xwl:nnnnnnnxv4)": {"args": "xwl:nnnnnnnxv4", "return": "", "name": "egpTriangle", "desc": ""}, "qj()": {"args": "", "return": "q", "name": "qj", "desc": ""}, "egpLine(e:nxv2xv2xv4)": {"args": "e:nxv2xv2xv4", "return": "", "name": "egpLine", "desc": ""}, "findClipFromModel(s)": {"args": "s", "return": "n", "name": "findClipFromModel", "desc": "Filters the list of entities by removing all entities that do have this model"}, "first()": {"args": "", "return": "n", "name": "first", "desc": ""}, "noranger()": {"args": "", "return": "xrd", "name": "noranger", "desc": ""}, "rangerFilter(e)": {"args": "e", "return": "", "name": "rangerFilter", "desc": "Feed entities you don't want the trace to hit"}, "vec4(vn)": {"args": "vn", "return": "xv4", "name": "vec4", "desc": "Converts a 3D vector into a 4D vector (the w component is set to the second argument)"}, "aimNormal(e:)": {"args": "e:", "return": "v", "name": "aimNormal", "desc": ""}, "writeString(xwl:ns)": {"args": "xwl:ns", "return": "n", "name": "writeString", "desc": "Writes a null-terminated string to the given address. Returns the next free address or 0 on failure."}, "egpPosY1(e:nn)": {"args": "e:nn", "return": "", "name": "egpPosY1", "desc": ""}, "pushMatrix4(r:xm4)": {"args": "r:xm4", "return": "", "name": "pushMatrix4", "desc": ""}, "maxOfType(s)": {"args": "s", "return": "n", "name": "maxOfType", "desc": "Returns the maximum allowed of a certain type of entity, i.e. maxOfType(\"wire_thrusters\").  Returns 0 if you enter an invalid parameter."}, "vector2(t:s)": {"args": "t:s", "return": "xv2", "name": "vector2", "desc": ""}, "bone(e:n)": {"args": "e:n", "return": "b", "name": "bone", "desc": "Returns ''E'''s ''N''th bone"}, "npcDisp(e:e)": {"args": "e:e", "return": "s", "name": "npcDisp", "desc": " Returns the NPC's relationship to entity E."}, "egpText(e:nsnn)": {"args": "e:nsnn", "return": "", "name": "egpText", "desc": ""}, "vec4(xv2)": {"args": "xv2", "return": "xv4", "name": "vec4", "desc": ""}, "identity4()": {"args": "", "return": "xm4", "name": "identity4", "desc": ""}, "egpBoxOutline(xwl:nnnnnv)": {"args": "xwl:nnnnnv", "return": "", "name": "egpBoxOutline", "desc": ""}, "findDisallowModel(s)": {"args": "s", "return": "", "name": "findDisallowModel", "desc": "Remove entities with this model (or partial model name) from the whitelist"}, "maxPlayers()": {"args": "", "return": "n", "name": "maxPlayers", "desc": ""}, "changed(xwl)": {"args": "xwl", "return": "n", "name": "changed", "desc": ""}, "select(nxv2...)": {"args": "nxv2...", "return": "xv2", "name": "select", "desc": ""}, "width(e:)": {"args": "e:", "return": "n", "name": "width", "desc": ""}, "tool(e:)": {"args": "e:", "return": "s", "name": "tool", "desc": ""}, "setTable(xwl:st)": {"args": "xwl:st", "return": "t", "name": "setTable", "desc": ""}, "select(nxm4...)": {"args": "nxm4...", "return": "xm4", "name": "select", "desc": ""}, "distance(xv4:xv4)": {"args": "xv4:xv4", "return": "n", "name": "distance", "desc": ""}, "gRemoveAllNumbers()": {"args": "", "return": "", "name": "gRemoveAllNumbers", "desc": ""}, "setY(v:n)": {"args": "v:n", "return": "v", "name": "setY", "desc": "Returns a copy of the vector with Y replaced (use as Vec = Vec:setY(...))"}, "dot(v:v)": {"args": "v:v", "return": "n", "name": "dot", "desc": "Gets the vector dot (scalar) product"}, "teamScore(n)": {"args": "n", "return": "n", "name": "teamScore", "desc": ""}, "egpText(xwl:nsnn)": {"args": "xwl:nsnn", "return": "", "name": "egpText", "desc": ""}, "randint(n)": {"args": "n", "return": "n", "name": "randint", "desc": "Returns a random integer from 1 to the specified value [''1 <= x <= a'' ]"}, "real(c)": {"args": "c", "return": "n", "name": "real", "desc": "Returns the real part of ''C''"}, "unshiftVector4(r:xv4)": {"args": "r:xv4", "return": "", "name": "unshiftVector4", "desc": ""}, "holoUnparent(n)": {"args": "n", "return": "", "name": "holoUnparent", "desc": "Index<br>Removes any parenting associations from a hologram"}, "egpPos1(xwl:nnn)": {"args": "xwl:nnn", "return": "", "name": "egpPos1", "desc": ""}, "fileRead(s)": {"args": "s", "return": "s", "name": "fileRead", "desc": "Returns the string data from a given file (has to be loaded onto server)."}, "log(q)": {"args": "q", "return": "q", "name": "log", "desc": "Calculates natural logarithm of ''Q''"}, "vec2(v)": {"args": "v", "return": "xv2", "name": "vec2", "desc": "Converts a 3D vector into a 2D vector (the z component is dropped)"}, "rangerHitEntities(n)": {"args": "n", "return": "", "name": "rangerHitEntities", "desc": "Default is 1, if value is given as 0 it will ignore entities"}, "isConstrainedTo(e:)": {"args": "e:", "return": "e", "name": "isConstrainedTo", "desc": ""}, "findClearBlackClassList()": {"args": "", "return": "", "name": "findClearBlackClassList", "desc": ""}, "setTrails(e:nnnsvn)": {"args": "e:nnnsvn", "return": "", "name": "setTrails", "desc": "StartSize, EndSize, Length, Material, Color (RGB), Alpha<br />Adds a trail to ''E'' with the specified attributes."}, "toUnit(sn)": {"args": "sn", "return": "n", "name": "toUnit", "desc": "Converts default garrysmod units to specified units"}, "frags(e:)": {"args": "e:", "return": "n", "name": "frags", "desc": ""}, "egpTextLayout(e:nsxv2xv2v)": {"args": "e:nsxv2xv2v", "return": "", "name": "egpTextLayout", "desc": ""}, "atan(n)": {"args": "n", "return": "n", "name": "atan", "desc": "Returns the inverse tangent of the argument, in degrees"}, "lastSaidWhen()": {"args": "", "return": "n", "name": "lastSaidWhen", "desc": ""}, "element(xm2:nn)": {"args": "xm2:nn", "return": "n", "name": "element", "desc": ""}, "dsSendDirect(sen)": {"args": "sen", "return": "n", "name": "dsSendDirect", "desc": ""}, "glonEncode(t)": {"args": "t", "return": "s", "name": "glonEncode", "desc": "Encodes ''T'' into a string, using [[GLON]]."}, "isConstrainedTo(e:n)": {"args": "e:n", "return": "e", "name": "isConstrainedTo", "desc": "Returns the ''N''th entity ''E'' was constrained to"}, "writeCell(xwl:nn)": {"args": "xwl:nn", "return": "n", "name": "writeCell", "desc": "Deprecated. Use XWL[N]=X instead."}, "vec(nnn)": {"args": "nnn", "return": "v", "name": "vec", "desc": "Makes a 3D vector"}, "isSuperAdmin(e:)": {"args": "e:", "return": "n", "name": "isSuperAdmin", "desc": ""}, "hasOutput(xwl:s)": {"args": "xwl:s", "return": "n", "name": "hasOutput", "desc": "Returns true if the linked component has an output of the specified name."}, "dsSendDirect(srxv2)": {"args": "srxv2", "return": "n", "name": "dsSendDirect", "desc": ""}, "dsSend(ssnxv2)": {"args": "ssnxv2", "return": "n", "name": "dsSend", "desc": ""}, "holoParent(nn)": {"args": "nn", "return": "", "name": "holoParent", "desc": "Index (current Holo), Index (Holo being parented to)<br>Attaches a hologram to another hologram"}, "holoCreate(nvva)": {"args": "nvva", "return": "e", "name": "holoCreate", "desc": "Index, Position, Scale, Angle<br>Creates a new hologram entity"}, "dsSend(ssnxv4)": {"args": "ssnxv4", "return": "n", "name": "dsSend", "desc": ""}, "mod(an)": {"args": "an", "return": "a", "name": "mod", "desc": "Returns the remainder after PYR have been divided by argument 2"}, "findClosest(v)": {"args": "v", "return": "e", "name": "findClosest", "desc": "Returns the closest entity to the given point from the previous find event"}, "inputType(xwl:s)": {"args": "xwl:s", "return": "s", "name": "inputType", "desc": "Returns the type of input that ''S'' is in lowercase. ( \"NORMAL\"  is changed to \"number\" )"}, "shiftAngle(r:)": {"args": "r:", "return": "a", "name": "shiftAngle", "desc": ""}, "round(n)": {"args": "n", "return": "n", "name": "round", "desc": "Rounds the Argument to the nearest Integer"}, "signalSendDirect(se)": {"args": "se", "return": "", "name": "signalSendDirect", "desc": "Sends signal S to the given chip. Multiple calls for different chips do not overwrite each other."}, "minIndex(r:)": {"args": "r:", "return": "n", "name": "minIndex", "desc": ""}, "vehicle(e:)": {"args": "e:", "return": "e", "name": "vehicle", "desc": ""}, "setDiagonal(xm4:nnnn)": {"args": "xm4:nnnn", "return": "xm4", "name": "setDiagonal", "desc": ""}, "dsSend(ssxrd)": {"args": "ssxrd", "return": "n", "name": "dsSend", "desc": ""}, "removeString(r:n)": {"args": "r:n", "return": "s", "name": "removeString", "desc": ""}, "string(t:s)": {"args": "t:s", "return": "s", "name": "string", "desc": ""}, "realtime()": {"args": "", "return": "n", "name": "realtime", "desc": ""}, "log10(n)": {"args": "n", "return": "n", "name": "log10", "desc": " Returns the logarithm to base 10 of the Argument"}, "column(xm2:n)": {"args": "xm2:n", "return": "xv2", "name": "column", "desc": ""}, "transpose(xm2)": {"args": "xm2", "return": "xm2", "name": "transpose", "desc": ""}, "gRemoveAllComplexs()": {"args": "", "return": "", "name": "gRemoveAllComplexs", "desc": ""}, "secr(n)": {"args": "n", "return": "n", "name": "secr", "desc": "Returns the secant of N radians "}, "toLocal(e:a)": {"args": "e:a", "return": "a", "name": "toLocal", "desc": "Transforms from a world angle to an angle local to ''E''."}, "removeTrails(e:)": {"args": "e:", "return": "", "name": "removeTrails", "desc": ""}, "setMass(n)": {"args": "n", "return": "", "name": "setMass", "desc": ""}, "dsSendDirect(ser)": {"args": "ser", "return": "n", "name": "dsSendDirect", "desc": ""}, "y(m:)": {"args": "m:", "return": "v", "name": "y", "desc": ""}, "holoModel(nsn)": {"args": "nsn", "return": "", "name": "holoModel", "desc": "Index, Model, Skin<br>Changes the model of a hologram (see the model list below) as well as the skin number"}, "setColor(e:nnn)": {"args": "e:nnn", "return": "", "name": "setColor", "desc": "Changes the RGB color of an entity (leaves alpha alone)"}, "pop(r:)": {"args": "r:", "return": "", "name": "pop", "desc": ""}, "z(v:)": {"args": "v:", "return": "n", "name": "z", "desc": ""}, "soundStop(s)": {"args": "s", "return": "", "name": "soundStop", "desc": "Stops the sound stored at the string index and removes the entry"}, "egpAngle(e:nn)": {"args": "e:nn", "return": "", "name": "egpAngle", "desc": ""}, "toString(e:)": {"args": "e:", "return": "s", "name": "toString", "desc": ""}, "angnorm(a)": {"args": "a", "return": "a", "name": "angnorm", "desc": "Gets the normalized angle of an angle"}, "forward(e:)": {"args": "e:", "return": "v", "name": "forward", "desc": ""}, "qMod(q)": {"args": "q", "return": "q", "name": "qMod", "desc": "Changes quaternion ''Q'' so that the represented rotation is by an angle between 0 and 180 degrees (by coder0xff)"}, "match(s:sn)": {"args": "s:sn", "return": "r", "name": "match", "desc": ""}, "removeString(xgt:s)": {"args": "xgt:s", "return": "s", "name": "removeString", "desc": ""}, "egpLine(e:nnnnn)": {"args": "e:nnnnn", "return": "", "name": "egpLine", "desc": ""}, "soundDuration(s)": {"args": "s", "return": "n", "name": "soundDuration", "desc": "soundDuration(string Path to File) Returns the duration of the sound. Note: If the server hasn't the file it returns 60"}, "max(xv2xv2)": {"args": "xv2xv2", "return": "xv2", "name": "max", "desc": ""}, "holoColor(nvn)": {"args": "nvn", "return": "", "name": "holoColor", "desc": "Index, Color, Alpha<br>Changes the color and alpha of a hologram"}, "isWeldedTo(e:)": {"args": "e:", "return": "e", "name": "isWeldedTo", "desc": ""}, "element(m:nn)": {"args": "m:nn", "return": "n", "name": "element", "desc": "Returns the element with indices (i,j)"}, "rangerOffset(nvv)": {"args": "nvv", "return": "xrd", "name": "rangerOffset", "desc": "You input the range, a position vector, and a direction vector and it returns ranger data"}, "gamemode()": {"args": "", "return": "s", "name": "gamemode", "desc": ""}, "dsSendDirect(srt)": {"args": "srt", "return": "n", "name": "dsSendDirect", "desc": ""}, "tanhr(n)": {"args": "n", "return": "n", "name": "tanhr", "desc": ""}, "imag(c)": {"args": "c", "return": "n", "name": "imag", "desc": "Returns the imaginary part of ''C''"}, "floor(nn)": {"args": "nn", "return": "n", "name": "floor", "desc": "Rounds Argument 1 down to Argument 2's decimal precision"}, "egpLine(xwl:nnnnnxv4)": {"args": "xwl:nnnnnxv4", "return": "", "name": "egpLine", "desc": ""}, "changed(xm2)": {"args": "xm2", "return": "n", "name": "changed", "desc": ""}, "findClearBlackPlayerPropList()": {"args": "", "return": "", "name": "findClearBlackPlayerPropList", "desc": ""}, "egpPolyColor(e:nxv4r)": {"args": "e:nxv4r", "return": "", "name": "egpPolyColor", "desc": ""}, "egpDeleteFrame(e:n)": {"args": "e:n", "return": "", "name": "egpDeleteFrame", "desc": ""}, "cosh(n)": {"args": "n", "return": "n", "name": "cosh", "desc": "Returns the hyperbolic cosine of N"}, "soundPlay(e:nnsn)": {"args": "e:nnsn", "return": "", "name": "soundPlay", "desc": ""}, "setNumber(r:nn)": {"args": "r:nn", "return": "n", "name": "setNumber", "desc": ""}, "changed(s)": {"args": "s", "return": "n", "name": "changed", "desc": ""}, "trace(m)": {"args": "m", "return": "n", "name": "trace", "desc": "Returns the trace of a matrix"}, "curtime()": {"args": "", "return": "n", "name": "curtime", "desc": ""}, "array(xwl:s)": {"args": "xwl:s", "return": "r", "name": "array", "desc": ""}, "egpText(xwl:nsnnv)": {"args": "xwl:nsnnv", "return": "", "name": "egpText", "desc": ""}, "findByModel(s)": {"args": "s", "return": "n", "name": "findByModel", "desc": "Find all entities with the given model"}, "count(t:)": {"args": "t:", "return": "n", "name": "count", "desc": ""}, "qk()": {"args": "", "return": "q", "name": "qk", "desc": ""}, "select(nm...)": {"args": "nm...", "return": "m", "name": "select", "desc": ""}, "holoCanCreate()": {"args": "", "return": "n", "name": "holoCanCreate", "desc": ""}, "printColorDriver(e:...)": {"args": "e:...", "return": "", "name": "printColorDriver", "desc": "Like printColor but prints to the driver of a specified vehicle."}, "swapRows(m:nn)": {"args": "m:nn", "return": "m", "name": "swapRows", "desc": "Swaps the two rows specified"}, "fileAppend(ss)": {"args": "ss", "return": "", "name": "fileAppend", "desc": "Adds to the end of a file on your client, and if the file is on the server it adds to that file as well. First argument is the file name, second argument is the data to be written."}, "egpText(xwl:nsxv2v)": {"args": "xwl:nsxv2v", "return": "", "name": "egpText", "desc": ""}, "gRemoveAllNumbers(s)": {"args": "s", "return": "", "name": "gRemoveAllNumbers", "desc": ""}, "egpLine(e:nxv2xv2)": {"args": "e:nxv2xv2", "return": "", "name": "egpLine", "desc": ""}, "changed(m)": {"args": "m", "return": "n", "name": "changed", "desc": ""}, "findDisallowPlayerProps(s)": {"args": "s", "return": "", "name": "findDisallowPlayerProps", "desc": "Remove entities owned by this player from the whitelist"}, "dsGetScope()": {"args": "", "return": "n", "name": "dsGetScope", "desc": ""}, "popBone(r:)": {"args": "r:", "return": "b", "name": "popBone", "desc": ""}, "sign(n)": {"args": "n", "return": "n", "name": "sign", "desc": "Returns the sign of argument (-1,0,1) [''sign(N) = N / abs(N)'' ]"}, "entity()": {"args": "", "return": "e", "name": "entity", "desc": ""}, "runOnChat(n)": {"args": "n", "return": "", "name": "runOnChat", "desc": "If ''N'' == 0, the chip will no longer run on chat events, otherwise it makes this chip execute when someone chats. Only needs to be called once, not in every execution."}, "dsSend(ssn)": {"args": "ssn", "return": "n", "name": "dsSend", "desc": ""}, "applyOffsetTorque(e:vv)": {"args": "e:vv", "return": "", "name": "applyOffsetTorque", "desc": ""}, "signalClk(sn)": {"args": "sn", "return": "n", "name": "signalClk", "desc": "Returns 1 if the chip was executed because the signal ''S'' was sent to the scope ''N'', regardless of group. Returns 0 otherwise."}, "teamPlayers(n)": {"args": "n", "return": "n", "name": "teamPlayers", "desc": ""}, "egpCircle(e:nxv2xv2v)": {"args": "e:nxv2xv2v", "return": "", "name": "egpCircle", "desc": ""}, "egpFont(xwl:nsn)": {"args": "xwl:nsn", "return": "", "name": "egpFont", "desc": ""}, "randvec(vv)": {"args": "vv", "return": "v", "name": "randvec", "desc": ""}, "setColor(e:xv4)": {"args": "e:xv4", "return": "", "name": "setColor", "desc": ""}, "table()": {"args": "", "return": "t", "name": "table", "desc": ""}, "egpBox(xwl:nxv2xv2xv4)": {"args": "xwl:nxv2xv2xv4", "return": "", "name": "egpBox", "desc": ""}, "massCenterL(e:)": {"args": "e:", "return": "v", "name": "massCenterL", "desc": ""}, "printColorDriver(e:r)": {"args": "e:r", "return": "", "name": "printColorDriver", "desc": "Like printColorDriver but takes an array containing all the parameters."}, "setMatrix4(xwl:sxm4)": {"args": "xwl:sxm4", "return": "xm4", "name": "setMatrix4", "desc": ""}, "holoCreate(n)": {"args": "n", "return": "e", "name": "holoCreate", "desc": "Index<br>Creates a new hologram entity"}, "trusts(e:e)": {"args": "e:e", "return": "n", "name": "trusts", "desc": ""}, "sinh(n)": {"args": "n", "return": "n", "name": "sinh", "desc": "Returns the hyperbolic sine of N"}, "shootPos(e:)": {"args": "e:", "return": "v", "name": "shootPos", "desc": ""}, "det(xm2)": {"args": "xm2", "return": "n", "name": "det", "desc": ""}, "setColor(e:nnnn)": {"args": "e:nnnn", "return": "", "name": "setColor", "desc": "Changes the RGBA color of an entity"}, "outputType(xwl:s)": {"args": "xwl:s", "return": "s", "name": "outputType", "desc": "Returns the type of output that ''S'' is in lowercase. ( \"NORMAL\"  is changed to \"number\" )"}, "gSetVec(nv)": {"args": "nv", "return": "", "name": "gSetVec", "desc": ""}, "shiftL(v)": {"args": "v", "return": "v", "name": "shiftL", "desc": "Shifts the vector's components left:  shiftL( x,y,z ) = ( y,z,x )"}, "select(nc...)": {"args": "nc...", "return": "c", "name": "select", "desc": ""}, "y(xm4:)": {"args": "xm4:", "return": "v", "name": "y", "desc": ""}, "tan(n)": {"args": "n", "return": "n", "name": "tan", "desc": "Returns the tangent of N degrees "}, "maxVec(xv4xv4)": {"args": "xv4xv4", "return": "xv4", "name": "maxVec", "desc": ""}, "lastSaidWhen(e:)": {"args": "e:", "return": "n", "name": "lastSaidWhen", "desc": ""}, "csc(n)": {"args": "n", "return": "n", "name": "csc", "desc": "Returns the cosecant of N degrees "}, "mod(vn)": {"args": "vn", "return": "v", "name": "mod", "desc": "Returns the remainder after XYZ have been divided by argument 2"}, "clamp(xv2nn)": {"args": "xv2nn", "return": "xv2", "name": "clamp", "desc": ""}, "comp(n)": {"args": "n", "return": "c", "name": "comp", "desc": "Converts a real number to complex (returns complex number with real part ''N'' and imaginary part 0)"}, "team(e:)": {"args": "e:", "return": "n", "name": "team", "desc": ""}, "vel(e:)": {"args": "e:", "return": "v", "name": "vel", "desc": ""}, "soundPlay(snsn)": {"args": "snsn", "return": "", "name": "soundPlay", "desc": "soundPlay(string Index, int Duration, string Path to File, int FadeTime)"}, "findClearBlackEntityList()": {"args": "", "return": "", "name": "findClearBlackEntityList", "desc": ""}, "setBone(xwl:sb)": {"args": "xwl:sb", "return": "b", "name": "setBone", "desc": ""}, "round(a)": {"args": "a", "return": "a", "name": "round", "desc": "Rounds PYR to the nearest integer"}, "entity(n)": {"args": "n", "return": "e", "name": "entity", "desc": "Gets the entity associated with the id"}, "applyOffsetForce(vv)": {"args": "vv", "return": "", "name": "applyOffsetForce", "desc": "Applies force to the expression according to the first vector from the location of the second"}, "holoScaleUnits(n)": {"args": "n", "return": "v", "name": "holoScaleUnits", "desc": "Index<br>Returns the scale of the given hologram"}, "egpLine(xwl:nxv2xv2v)": {"args": "xwl:nxv2xv2v", "return": "", "name": "egpLine", "desc": ""}, "soundPlay(e:sns)": {"args": "e:sns", "return": "", "name": "soundPlay", "desc": ""}, "getSkinCount(e:)": {"args": "e:", "return": "n", "name": "getSkinCount", "desc": ""}, "applyAngForce(a)": {"args": "a", "return": "", "name": "applyAngForce", "desc": ""}, "up(b:)": {"args": "b:", "return": "v", "name": "up", "desc": ""}, "fileListClk()": {"args": "", "return": "n", "name": "fileListClk", "desc": ""}, "root(nn)": {"args": "nn", "return": "n", "name": "root", "desc": ""}, "dsSendDirect(ses)": {"args": "ses", "return": "n", "name": "dsSendDirect", "desc": ""}, "findClearWhitePlayerPropList()": {"args": "", "return": "", "name": "findClearWhitePlayerPropList", "desc": ""}, "distance(xrd:)": {"args": "xrd:", "return": "n", "name": "distance", "desc": ""}, "dsSend(ssnv)": {"args": "ssnv", "return": "n", "name": "dsSend", "desc": ""}, "toString(xv2:)": {"args": "xv2:", "return": "s", "name": "toString", "desc": ""}, "egpMaterial(xwl:ns)": {"args": "xwl:ns", "return": "", "name": "egpMaterial", "desc": ""}, "teamName(n:)": {"args": "n:", "return": "s", "name": "teamName", "desc": ""}, "egpLoadFrame(e:n)": {"args": "e:n", "return": "", "name": "egpLoadFrame", "desc": ""}, "noentity()": {"args": "", "return": "e", "name": "noentity", "desc": ""}, "setVector4(t:sxv4)": {"args": "t:sxv4", "return": "xv4", "name": "setVector4", "desc": ""}, "shiftR(v)": {"args": "v", "return": "v", "name": "shiftR", "desc": "Shifts the vector's components right:  shiftR( x,y,z ) = ( z,x,y )"}, "dsSendDirect(sre)": {"args": "sre", "return": "n", "name": "dsSendDirect", "desc": ""}, "i(n)": {"args": "n", "return": "c", "name": "i", "desc": "Returns ''N''*i"}, "egpTriangle(xwl:nnnnnnnv)": {"args": "xwl:nnnnnnnv", "return": "", "name": "egpTriangle", "desc": ""}, "unshiftNumber(r:n)": {"args": "r:n", "return": "", "name": "unshiftNumber", "desc": ""}, "cos(n)": {"args": "n", "return": "n", "name": "cos", "desc": "Returns the cosine of N degrees "}, "matrix2(xwl:s)": {"args": "xwl:s", "return": "xm2", "name": "matrix2", "desc": ""}, "holoParentAttachment(nes)": {"args": "nes", "return": "", "name": "holoParentAttachment", "desc": "Index, Entity, AttachmentID<br>Attaches a hologram to an attachmentID on an entity"}, "killPod(e:)": {"args": "e:", "return": "", "name": "killPod", "desc": ""}, "gGetNum(s)": {"args": "s", "return": "n", "name": "gGetNum", "desc": ""}, "unshiftComplex(r:c)": {"args": "r:c", "return": "", "name": "unshiftComplex", "desc": ""}, "vector(t:s)": {"args": "t:s", "return": "v", "name": "vector", "desc": ""}, "dsGetMatrix2()": {"args": "", "return": "xm2", "name": "dsGetMatrix2", "desc": ""}, "egpBoxOutline(e:nnnnnv)": {"args": "e:nnnnnv", "return": "", "name": "egpBoxOutline", "desc": ""}, "log2(n)": {"args": "n", "return": "n", "name": "log2", "desc": "Returns the logarithm to base 2 of the Argument"}, "type(e:)": {"args": "e:", "return": "s", "name": "type", "desc": ""}, "min(nn)": {"args": "nn", "return": "n", "name": "min", "desc": "Returns the lowest value Argument"}, "shiftL(xv4)": {"args": "xv4", "return": "xv4", "name": "shiftL", "desc": ""}, "mRotation(vn)": {"args": "vn", "return": "m", "name": "mRotation", "desc": "Creates a 3x3 rotation matrix, where the vector is the axis of rotation, and the number is the angle (anti-clockwise) in degrees. Example*: to rotate a vector (7,8,9) by 50 degrees about the axis (1,1,0), you would write V = mRotation(vec(1,1,0), 50) * vec(7,8,9)"}, "removeEntity(r:n)": {"args": "r:n", "return": "e", "name": "removeEntity", "desc": ""}, "isNPC(e:)": {"args": "e:", "return": "n", "name": "isNPC", "desc": ""}, "number(xwl:s)": {"args": "xwl:s", "return": "n", "name": "number", "desc": "Deprecated. Use XWL[S,number] instead."}, "inrange(vvv)": {"args": "vvv", "return": "n", "name": "inrange", "desc": ""}, "gSetStr(ns)": {"args": "ns", "return": "", "name": "gSetStr", "desc": ""}, "egpLine(e:nxv2xv2v)": {"args": "e:nxv2xv2v", "return": "", "name": "egpLine", "desc": ""}, "coshr(n)": {"args": "n", "return": "n", "name": "coshr", "desc": ""}, "isConstrained(e:)": {"args": "e:", "return": "n", "name": "isConstrained", "desc": ""}, "boxMin(e:)": {"args": "e:", "return": "v", "name": "boxMin", "desc": ""}, "find(s:s)": {"args": "s:s", "return": "n", "name": "find", "desc": "Returns the 1st occurrence of the string S, returns 0 if not found"}, "exp(q)": {"args": "q", "return": "q", "name": "exp", "desc": "Raises Euler's constant e to the power ''Q''"}, "max(nnnn)": {"args": "nnnn", "return": "n", "name": "max", "desc": "Returns the highest value Argument"}, "column(m:n)": {"args": "m:n", "return": "v", "name": "column", "desc": "Returns the column as a vector"}, "repeat(s:n)": {"args": "s:n", "return": "s", "name": "repeat", "desc": "Repeats the input string N times"}, "soundPitch(sn)": {"args": "sn", "return": "", "name": "soundPitch", "desc": "Same as above but takes a string index instead of an integer index"}, "popMatrix2(r:)": {"args": "r:", "return": "xm2", "name": "popMatrix2", "desc": ""}, "applyOffsetTorque(b:vv)": {"args": "b:vv", "return": "", "name": "applyOffsetTorque", "desc": ""}, "shiftMatrix2(r:)": {"args": "r:", "return": "xm2", "name": "shiftMatrix2", "desc": ""}, "radius(e:)": {"args": "e:", "return": "n", "name": "radius", "desc": ""}, "isDedicated()": {"args": "", "return": "n", "name": "isDedicated", "desc": ""}, "gRemoveAllTables()": {"args": "", "return": "", "name": "gRemoveAllTables", "desc": ""}, "gDeleteAng(n)": {"args": "n", "return": "a", "name": "gDeleteAng", "desc": ""}, "findAllowPlayer(e)": {"args": "e", "return": "", "name": "findAllowPlayer", "desc": "Remove this player from the entity blacklist"}, "comp()": {"args": "", "return": "c", "name": "comp", "desc": ""}, "egpCanDraw(xwl:)": {"args": "xwl:", "return": "n", "name": "egpCanDraw", "desc": ""}, "egpCircle(e:nxv2xv2)": {"args": "e:nxv2xv2", "return": "", "name": "egpCircle", "desc": ""}, "changed(n)": {"args": "n", "return": "n", "name": "changed", "desc": ""}, "insertBone(r:nb)": {"args": "r:nb", "return": "", "name": "insertBone", "desc": ""}, "egpBox(e:nnnnn)": {"args": "e:nnnnn", "return": "", "name": "egpBox", "desc": ""}, "massCenter(e:)": {"args": "e:", "return": "v", "name": "massCenter", "desc": ""}, "arg(c)": {"args": "c", "return": "n", "name": "arg", "desc": "Returns the argument of ''C''"}, "atanr(n)": {"args": "n", "return": "n", "name": "atanr", "desc": "Returns the inverse tangent of the argument, in radians"}, "clamp(xv4nn)": {"args": "xv4nn", "return": "xv4", "name": "clamp", "desc": ""}, "egpCircle(xwl:nxv2xv2xv4)": {"args": "xwl:nxv2xv2xv4", "return": "", "name": "egpCircle", "desc": ""}, "removeBone(xgt:s)": {"args": "xgt:s", "return": "b", "name": "removeBone", "desc": ""}, "keyUse(e:)": {"args": "e:", "return": "n", "name": "keyUse", "desc": ""}, "holoIndex(e)": {"args": "e", "return": "n", "name": "holoIndex", "desc": "Returns the index of the given hologram entity."}, "matrix4(xm2xm2xm2xm2)": {"args": "xm2xm2xm2xm2", "return": "xm4", "name": "matrix4", "desc": ""}, "egpClear(xwl:r)": {"args": "xwl:r", "return": "", "name": "egpClear", "desc": ""}, "dsSend(sss)": {"args": "sss", "return": "n", "name": "dsSend", "desc": ""}, "gRemoveAllMatrixs(s)": {"args": "s", "return": "", "name": "gRemoveAllMatrixs", "desc": ""}, "matrix(nnnnnnnnn)": {"args": "nnnnnnnnn", "return": "m", "name": "matrix", "desc": ""}, "gRemoveAllStrings(s)": {"args": "s", "return": "", "name": "gRemoveAllStrings", "desc": ""}, "attachmentPos(e:n)": {"args": "e:n", "return": "v", "name": "attachmentPos", "desc": ""}, "isSteamFriend(e:e)": {"args": "e:e", "return": "n", "name": "isSteamFriend", "desc": "Returns if the given Entity is a steam friend of the first Entity"}, "exp(c)": {"args": "c", "return": "c", "name": "exp", "desc": "Raises Euler's constant e to the power of ''C''"}, "egpPosX(xwl:nn)": {"args": "xwl:nn", "return": "", "name": "egpPosX", "desc": ""}, "setRow(m:nnnn)": {"args": "m:nnnn", "return": "m", "name": "setRow", "desc": "Sets the values of a row. The first argument given specifies the row(j), the following arguments are the values 1j, 2j, 3j"}, "matrix4(xwl:s)": {"args": "xwl:s", "return": "xm4", "name": "matrix4", "desc": ""}, "npcGiveWeapon(e:s)": {"args": "e:s", "return": "", "name": "npcGiveWeapon", "desc": " Gives the NPC a weapon. Example: E:npcGiveWeapon(\"pistol\"). Other arguments include \"ar2\", \"crowbar\", \"357\", \"shotgun\", \"crossbow\", \"rpg\", \"frag\", etc. Other such as the bugbait or slam may be buggy."}, "findClearBlackModelList()": {"args": "", "return": "", "name": "findClearBlackModelList", "desc": ""}, "x(xv2:)": {"args": "xv2:", "return": "n", "name": "x", "desc": ""}, "dsSendDirect(srxv4)": {"args": "srxv4", "return": "n", "name": "dsSendDirect", "desc": ""}, "egpText(e:nsxv2)": {"args": "e:nsxv2", "return": "", "name": "egpText", "desc": ""}, "gGetStr(s)": {"args": "s", "return": "s", "name": "gGetStr", "desc": ""}, "egpToMouse(e:e)": {"args": "e:e", "return": "xv2", "name": "egpToMouse", "desc": ""}, "setRow(xm4:nnnnn)": {"args": "xm4:nnnnn", "return": "xm4", "name": "setRow", "desc": ""}, "findAllowPlayerProps(s)": {"args": "s", "return": "", "name": "findAllowPlayerProps", "desc": "Remove entities owned by this player from the blacklist"}, "removeVector2(xgt:s)": {"args": "xgt:s", "return": "xv2", "name": "removeVector2", "desc": ""}, "cschr(n)": {"args": "n", "return": "n", "name": "cschr", "desc": ""}, "egpMaterialFromScreen(xwl:nxwl)": {"args": "xwl:nxwl", "return": "", "name": "egpMaterialFromScreen", "desc": ""}, "qj(n)": {"args": "n", "return": "q", "name": "qj", "desc": "Returns ''N''*j"}, "dsClkName()": {"args": "", "return": "s", "name": "dsClkName", "desc": ""}, "findSortByDistance(v)": {"args": "v", "return": "n", "name": "findSortByDistance", "desc": "Sorts the entities from the last find event, index 1 is the closest to point V, returns the number of entities in the list"}, "npcRelationship(e:ssn)": {"args": "e:ssn", "return": "", "name": "npcRelationship", "desc": " Same as above, but sets relationship to an entire class specified by the first string. Example: \"npc_manhack\", \"prop_physics\"."}, "real(q:)": {"args": "q:", "return": "n", "name": "real", "desc": ""}, "sin(n)": {"args": "n", "return": "n", "name": "sin", "desc": "Returns the sine of N degrees "}, "csqrt(n)": {"args": "n", "return": "c", "name": "csqrt", "desc": "Calculates the complex square root of the real number ''N''"}, "egpLine(xwl:nxv2xv2)": {"args": "xwl:nxv2xv2", "return": "", "name": "egpLine", "desc": ""}, "min(nnn)": {"args": "nnn", "return": "n", "name": "min", "desc": "Returns the lowest value Argument"}, "writeString(xwl:snnnv)": {"args": "xwl:snnnv", "return": "", "name": "writeString", "desc": ""}, "find(s:sn)": {"args": "s:sn", "return": "n", "name": "find", "desc": ""}, "findClearWhiteClassList()": {"args": "", "return": "", "name": "findClearWhiteClassList", "desc": ""}, "toString(n:n)": {"args": "n:n", "return": "s", "name": "toString", "desc": ""}, "inrange(aaa)": {"args": "aaa", "return": "n", "name": "inrange", "desc": ""}, "print(ns)": {"args": "ns", "return": "", "name": "print", "desc": "Same as print(''S''), but can make the text show up in different places. ''N'' can be one of the following: _HUD_PRINTCENTER, _HUD_PRINTCONSOLE, _HUD_PRINTNOTIFY, _HUD_PRINTTALK."}, "volume(e:)": {"args": "e:", "return": "n", "name": "volume", "desc": ""}, "removeComplex(xgt:s)": {"args": "xgt:s", "return": "c", "name": "removeComplex", "desc": ""}, "dsSendDirect(seb)": {"args": "seb", "return": "n", "name": "dsSendDirect", "desc": ""}, "gRemoveAllRangers()": {"args": "", "return": "", "name": "gRemoveAllRangers", "desc": ""}, "pushString(r:s)": {"args": "r:s", "return": "", "name": "pushString", "desc": ""}, "findExcludePlayerProps(e)": {"args": "e", "return": "", "name": "findExcludePlayerProps", "desc": "Exclude entities owned by this player from future finds"}, "dsSend(ssxwl)": {"args": "ssxwl", "return": "n", "name": "dsSend", "desc": ""}, "matrix4(nnnnnnnnnnnnnnnn)": {"args": "nnnnnnnnnnnnnnnn", "return": "xm4", "name": "matrix4", "desc": ""}, "egpPoly(xwl:n...)": {"args": "xwl:n...", "return": "", "name": "egpPoly", "desc": ""}, "setRow(xm4:nxv4)": {"args": "xm4:nxv4", "return": "xm4", "name": "setRow", "desc": ""}, "applyAngForce(e:a)": {"args": "e:a", "return": "", "name": "applyAngForce", "desc": "Applies torque to the entity according to the given angle"}, "inv(q)": {"args": "q", "return": "q", "name": "inv", "desc": "Returns the inverse of ''Q''"}, "rgb2digi(nnnn)": {"args": "nnnn", "return": "n", "name": "rgb2digi", "desc": ""}, "weapon(e:)": {"args": "e:", "return": "e", "name": "weapon", "desc": ""}, "vec2(xv4)": {"args": "xv4", "return": "xv2", "name": "vec2", "desc": ""}, "matchFirst(s:s)": {"args": "s:s", "return": "s", "name": "matchFirst", "desc": ""}, "quat(e)": {"args": "e", "return": "q", "name": "quat", "desc": "Converts angle of ''E'' to a quaternion"}, "gRemoveAllMatrix2s(s)": {"args": "s", "return": "", "name": "gRemoveAllMatrix2s", "desc": ""}, "rangerDefaultZero(n)": {"args": "n", "return": "", "name": "rangerDefaultZero", "desc": "If given any value other than 0 it will default the distance data to zero when nothing is hit"}, "signalClk(s)": {"args": "s", "return": "n", "name": "signalClk", "desc": "Returns 1 if the chip was executed because the signal ''S'' was sent, regardless of group or scope. Returns 0 otherwise."}, "bAnd(nn)": {"args": "nn", "return": "n", "name": "bAnd", "desc": ""}, "ranger(nnn)": {"args": "nnn", "return": "xrd", "name": "ranger", "desc": "Same as above with added inputs for X and Y skew"}, "health(e:)": {"args": "e:", "return": "n", "name": "health", "desc": ""}, "eyeTrace(e:)": {"args": "e:", "return": "xrd", "name": "eyeTrace", "desc": ""}, "gDeleteAllStr()": {"args": "", "return": "", "name": "gDeleteAllStr", "desc": ""}, "removeMatrix4(xgt:s)": {"args": "xgt:s", "return": "xm4", "name": "removeMatrix4", "desc": ""}, "dsClk(s)": {"args": "s", "return": "n", "name": "dsClk", "desc": "Returns 1 if the current execution was caused by a signal with the signal name ''S''. Returns 0 otherwise."}, "matrix()": {"args": "", "return": "m", "name": "matrix", "desc": ""}, "findDisallowPlayer(e)": {"args": "e", "return": "", "name": "findDisallowPlayer", "desc": "Remove this player from the entity whitelist"}, "lastSpoke()": {"args": "", "return": "e", "name": "lastSpoke", "desc": ""}, "setRoll(a:n)": {"args": "a:n", "return": "a", "name": "setRoll", "desc": "Returns a copy of the angle with Roll replaced (use as Ang = Ang:setRoll(...)) "}, "writeString(xwl:snnv)": {"args": "xwl:snnv", "return": "", "name": "writeString", "desc": ""}, "ranger(xwl:s)": {"args": "xwl:s", "return": "xrd", "name": "ranger", "desc": ""}, "insertAngle(r:na)": {"args": "r:na", "return": "", "name": "insertAngle", "desc": ""}, "npcGoWalk(e:v)": {"args": "e:v", "return": "", "name": "npcGoWalk", "desc": "Tells the NPC to walk to position V"}, "egpPoly(e:nr)": {"args": "e:nr", "return": "", "name": "egpPoly", "desc": ""}, "egpSetFont(xwl:nsn)": {"args": "xwl:nsn", "return": "", "name": "egpSetFont", "desc": ""}, "egpClear(xwl:)": {"args": "xwl:", "return": "", "name": "egpClear", "desc": ""}, "removeAngle(r:n)": {"args": "r:n", "return": "a", "name": "removeAngle", "desc": ""}, "findInSphere(vn)": {"args": "vn", "return": "n", "name": "findInSphere", "desc": "Finds entities in a sphere around V with a radius of N, returns the number found after filtering"}, "insertMatrix2(r:nxm2)": {"args": "r:nxm2", "return": "", "name": "insertMatrix2", "desc": ""}, "dsSetScope(n)": {"args": "n", "return": "", "name": "dsSetScope", "desc": "Sets the scope of the E2 to ''N''. See above for what setting the scope does."}, "x(xv4:)": {"args": "xv4:", "return": "n", "name": "x", "desc": ""}, "rangerOffsetHull(nvvvv)": {"args": "nvvvv", "return": "xrd", "name": "rangerOffsetHull", "desc": "Inputs: Distance, StartPos, Direction, Hull MinSize, Hull MaxSize"}, "duped()": {"args": "", "return": "n", "name": "duped", "desc": ""}, "shiftComplex(r:)": {"args": "r:", "return": "c", "name": "shiftComplex", "desc": ""}, "unshiftVector(r:v)": {"args": "r:v", "return": "", "name": "unshiftVector", "desc": ""}, "gGetEnt(s)": {"args": "s", "return": "e", "name": "gGetEnt", "desc": ""}, "egpLine(e:nnnnnxv4)": {"args": "e:nnnnnxv4", "return": "", "name": "egpLine", "desc": ""}, "cos(c)": {"args": "c", "return": "c", "name": "cos", "desc": "Calculates the cosine of ''C''"}, "setAngle(r:na)": {"args": "r:na", "return": "a", "name": "setAngle", "desc": ""}, "insertString(r:ns)": {"args": "r:ns", "return": "", "name": "insertString", "desc": ""}, "findClearWhiteList()": {"args": "", "return": "", "name": "findClearWhiteList", "desc": ""}, "setRanger(t:sxrd)": {"args": "t:sxrd", "return": "xrd", "name": "setRanger", "desc": ""}, "setMatrix(t:sm)": {"args": "t:sm", "return": "m", "name": "setMatrix", "desc": ""}, "rangerReset()": {"args": "", "return": "", "name": "rangerReset", "desc": ""}, "typeids(t:)": {"args": "t:", "return": "r", "name": "typeids", "desc": ""}, "element(xm4:nn)": {"args": "xm4:nn", "return": "n", "name": "element", "desc": ""}, "toString(v)": {"args": "v", "return": "s", "name": "toString", "desc": ""}, "egpCircle(xwl:nnnnnxv4)": {"args": "xwl:nnnnnxv4", "return": "", "name": "egpCircle", "desc": ""}, "gSetStr(ss)": {"args": "ss", "return": "", "name": "gSetStr", "desc": ""}, "egpBoxOutline(xwl:nnnnnxv4)": {"args": "xwl:nnnnnxv4", "return": "", "name": "egpBoxOutline", "desc": ""}, "dsSend(ssr)": {"args": "ssr", "return": "n", "name": "dsSend", "desc": ""}, "round(xv2)": {"args": "xv2", "return": "xv2", "name": "round", "desc": ""}, "inertia(e:)": {"args": "e:", "return": "v", "name": "inertia", "desc": ""}, "clk()": {"args": "", "return": "n", "name": "clk", "desc": ""}, "egpPos(xwl:nnn)": {"args": "xwl:nnn", "return": "", "name": "egpPos", "desc": ""}, "rangerAngleHull(nnnv)": {"args": "nnnv", "return": "xrd", "name": "rangerAngleHull", "desc": ""}, "dsGetGroup()": {"args": "", "return": "s", "name": "dsGetGroup", "desc": ""}, "bone(r:n)": {"args": "r:n", "return": "b", "name": "bone", "desc": ""}, "dsSendDirect(sem)": {"args": "sem", "return": "n", "name": "dsSendDirect", "desc": ""}, "round(an)": {"args": "an", "return": "a", "name": "round", "desc": "Rounds PYR to argument 2's decimal precision"}, "csch(c)": {"args": "c", "return": "c", "name": "csch", "desc": "Calculates the hyperbolic cosecant of ''C''"}, "gGetVec(n)": {"args": "n", "return": "v", "name": "gGetVec", "desc": ""}, "dehomogenized(v:)": {"args": "v:", "return": "xv2", "name": "dehomogenized", "desc": ""}, "setMass(b:n)": {"args": "b:n", "return": "", "name": "setMass", "desc": "Sets ''B'''s mass (between 0.001 and 50,000)"}, "findExcludeEntities(r)": {"args": "r", "return": "", "name": "findExcludeEntities", "desc": "Exclude all entities from ''R'' from future finds"}, "trimRight(s:)": {"args": "s:", "return": "s", "name": "trimRight", "desc": ""}, "dsGetSender()": {"args": "", "return": "e", "name": "dsGetSender", "desc": ""}, "egpBox(e:nnnnnxv4)": {"args": "e:nnnnnxv4", "return": "", "name": "egpBox", "desc": ""}, "teamDeaths(n)": {"args": "n", "return": "n", "name": "teamDeaths", "desc": ""}, "removeVector4(r:n)": {"args": "r:n", "return": "xv4", "name": "removeVector4", "desc": ""}, "setX(xv2:n)": {"args": "xv2:n", "return": "xv2", "name": "setX", "desc": ""}, "setEntity(t:se)": {"args": "t:se", "return": "e", "name": "setEntity", "desc": ""}, "setEntity(xwl:se)": {"args": "xwl:se", "return": "e", "name": "setEntity", "desc": "Deprecated. Use XWL[S,entity]=X instead."}, "removing()": {"args": "", "return": "n", "name": "removing", "desc": ""}, "sec(c)": {"args": "c", "return": "c", "name": "sec", "desc": "Calculates the secant of ''C''"}, "findClipFromSphere(vn)": {"args": "vn", "return": "n", "name": "findClipFromSphere", "desc": "Filters the list of entities by removing all entities within the specified sphere (center, radius)"}, "setColumn(m:nnnn)": {"args": "m:nnnn", "return": "m", "name": "setColumn", "desc": "Sets the values of a column. The first argument given specifies the column(i), the following arguments are the values i1, i2, i3"}, "glonError()": {"args": "", "return": "s", "name": "glonError", "desc": ""}, "setColor(e:vn)": {"args": "e:vn", "return": "", "name": "setColor", "desc": "Changes the RGBA color of an entity, using a vector with values (R,G,B). The additional argument sets alpha"}, "convar(s)": {"args": "s", "return": "s", "name": "convar", "desc": "Give a console command such as \"<tt>name</tt>\" and it returns the set value"}, "egpClear(e:)": {"args": "e:", "return": "", "name": "egpClear", "desc": ""}, "setColumn(xm4:nnnnn)": {"args": "xm4:nnnnn", "return": "xm4", "name": "setColumn", "desc": ""}, "gDeleteVec(s)": {"args": "s", "return": "v", "name": "gDeleteVec", "desc": ""}, "randvec()": {"args": "", "return": "v", "name": "randvec", "desc": ""}, "runOnList(n)": {"args": "n", "return": "", "name": "runOnList", "desc": "Makes the expression execute when the list has finished uploading to the server."}, "angVelVector(e:)": {"args": "e:", "return": "v", "name": "angVelVector", "desc": ""}, "dsGetGroups()": {"args": "", "return": "r", "name": "dsGetGroups", "desc": ""}, "gDeleteAllNum()": {"args": "", "return": "", "name": "gDeleteAllNum", "desc": ""}, "readCell(xwl:n)": {"args": "xwl:n", "return": "n", "name": "readCell", "desc": "Deprecated. Use XWL[N] instead."}, "log10(c)": {"args": "c", "return": "c", "name": "log10", "desc": "Calculates the logarithm of ''C'' to base 10"}, "select(nq...)": {"args": "nq...", "return": "q", "name": "select", "desc": ""}, "dsSendDirect(sec)": {"args": "sec", "return": "n", "name": "dsSendDirect", "desc": ""}, "max(r:)": {"args": "r:", "return": "n", "name": "max", "desc": ""}, "soundPlay(e:nns)": {"args": "e:nns", "return": "", "name": "soundPlay", "desc": ""}, "primaryAmmoType(e:)": {"args": "e:", "return": "s", "name": "primaryAmmoType", "desc": ""}, "bShl(nn)": {"args": "nn", "return": "n", "name": "bShl", "desc": ""}, "dsSendDirect(seq)": {"args": "seq", "return": "n", "name": "dsSendDirect", "desc": ""}, "matrix2(r:n)": {"args": "r:n", "return": "xm2", "name": "matrix2", "desc": ""}, "toString(q:)": {"args": "q:", "return": "s", "name": "toString", "desc": ""}, "egpDraw(e:)": {"args": "e:", "return": "n", "name": "egpDraw", "desc": ""}, "egpGetPos1(e:nn)": {"args": "e:nn", "return": "xv2", "name": "egpGetPos1", "desc": ""}, "pushNumber(r:n)": {"args": "r:n", "return": "", "name": "pushNumber", "desc": ""}, "vector4(xwl:s)": {"args": "xwl:s", "return": "xv4", "name": "vector4", "desc": ""}, "select(nxm2...)": {"args": "nxm2...", "return": "xm2", "name": "select", "desc": ""}}